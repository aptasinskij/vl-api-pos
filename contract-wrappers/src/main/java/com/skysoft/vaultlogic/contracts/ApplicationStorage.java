package com.skysoft.vaultlogic.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.contracts.SmartContractEvent;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class ApplicationStorage extends Contract {
    private static final String BINARY = "0x60806040523480156200001157600080fd5b5060405160208062003b1a833981016040818152915182820190925260138082527f6170706c69636174696f6e2d73746f72616765000000000000000000000000006020830190815260008054600160a060020a031916331790558392916200007d91600191620002b8565b505080600160a060020a031663713b563f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015620000d757600080fd5b505af1158015620000ec573d6000803e3d6000fd5b505050506040513d60208110156200010357600080fd5b505160038054600160a060020a031916600160a060020a03928316179055604080517fd0496d6a00000000000000000000000000000000000000000000000000000000815290519183169163d0496d6a916004808201926020929091908290030181600087803b1580156200017757600080fd5b505af11580156200018c573d6000803e3d6000fd5b505050506040513d6020811015620001a357600080fd5b505160028054600160a060020a031916600160a060020a03928316178082556040517ff2c298be00000000000000000000000000000000000000000000000000000000815260206004820190815260018054610100818316150260001901169490940460248301819052929094169363f2c298be93929091829160449091019084908015620002765780601f106200024a5761010080835404028352916020019162000276565b820191906000526020600020905b8154815290600101906020018083116200025857829003601f168201915b505092505050600060405180830381600087803b1580156200029757600080fd5b505af1158015620002ac573d6000803e3d6000fd5b5050505050506200035d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002fb57805160ff19168380011785556200032b565b828001600101855582156200032b579182015b828111156200032b5782518255916020019190600101906200030e565b50620003399291506200033d565b5090565b6200035a91905b8082111562000339576000815560010162000344565b90565b6137ad806200036d6000396000f3006080604052600436106100cc5763ffffffff60e060020a60003504166301f629c081146100d157806306fdde03146100f757806307d8ef9a1461018157806308114c9d146101df5780632f2bb4381461021357806341c0e1b5146103425780634980e0b8146103575780638da5cb5b146104135780639507d39a146104285780639fdc3a4d14610440578063c3c5a54714610458578063d32cca471461048d578063edcce1b3146104b7578063f004a7e414610573578063f6efa6741461058e578063ff78b452146105a6575b600080fd5b3480156100dd57600080fd5b506100f5600435600160a060020a03602435166105be565b005b34801561010357600080fd5b5061010c610622565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014657818101518382015260200161012e565b50505050905090810190601f1680156101735780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018d57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526100f59583359536956044949193909101919081908401838280828437509497506106af9650505050505050565b3480156101eb57600080fd5b506101f7600435610771565b60408051600160a060020a039092168252519081900360200190f35b34801561021f57600080fd5b5061022b600435610796565b604051808060200186600160a060020a0316600160a060020a031681526020018060200185600160a060020a0316600160a060020a03168152602001848152602001838103835288818151815260200191508051906020019080838360005b838110156102a257818101518382015260200161028a565b50505050905090810190601f1680156102cf5780820380516001836020036101000a031916815260200191505b50838103825286518152865160209182019188019080838360005b838110156103025781810151838201526020016102ea565b50505050905090810190601f16801561032f5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34801561034e57600080fd5b506100f56107fd565b34801561036357600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526100f595833595369560449491939091019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b600160a060020a038b35169b909a90999401975091955091820193509150819084018382808284375094975050508335600160a060020a0316945050506020909101359050610863565b34801561041f57600080fd5b506101f7610a20565b34801561043457600080fd5b5061022b600435610a2f565b34801561044c57600080fd5b5061010c600435610a69565b34801561046457600080fd5b50610479600160a060020a0360043516610a88565b604080519115158252519081900360200190f35b34801561049957600080fd5b506104a5600435610aa7565b60408051918252519081900360200190f35b3480156104c357600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526100f595833595369560449491939091019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b600160a060020a038b35169b909a90999401975091955091820193509150819084018382808284375094975050508335600160a060020a0316945050506020909101359050610ac6565b34801561057f57600080fd5b506100f5600435602435610b8a565b34801561059a57600080fd5b5061010c600435610be6565b3480156105b257600080fd5b506101f7600435610c05565b6003546105db90600160a060020a0316838363ffffffff610c2416565b60408051838152600160a060020a038316602082015281517fecc5a039ee5311e887972ef4263d65344c7ca962ba3ecd33e66faef4ee533351929181900390910190a15050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106a75780601f1061067c576101008083540402835291602001916106a7565b820191906000526020600020905b81548152906001019060200180831161068a57829003601f168201915b505050505081565b6003546106cc90600160a060020a0316838363ffffffff610d1616565b7f3908ab5caf44fc3e7a4b58da20fc1794f0301ec457d66b301c4939be57ec650182826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561073257818101518382015260200161071a565b50505050905090810190601f16801561075f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b60035460009061079090600160a060020a03168363ffffffff610e4216565b92915050565b6060600060606000806107a761366e565b6003546107c390600160a060020a03168863ffffffff610f3e16565b9050806020015195508060400151945080606001519350806080015192508060a0015160028111156107f157fe5b91505091939590929450565b600054600160a060020a0316321461085f576040805160e560020a62461bcd02815260206004820152601260248201527f6f6e6c79206f776e657220616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b6000ff5b6108d360c06040519081016040528088815260200187815260200186600160a060020a0316815260200185815260200184600160a060020a031681526020018360028111156108ae57fe5b60028111156108b957fe5b9052600354600160a060020a03169063ffffffff61174416565b507fb2aef06aed6c32445d7d5744b2ba436bbe89a3a8c4d06a5f19ebc62b8d3f6b1a868686868686604051808781526020018060200186600160a060020a0316600160a060020a031681526020018060200185600160a060020a0316600160a060020a03168152602001848152602001838103835288818151815260200191508051906020019080838360005b83811015610978578181015183820152602001610960565b50505050905090810190601f1680156109a55780820380516001836020036101000a031916815260200191505b50838103825286518152865160209182019188019080838360005b838110156109d85781810151838201526020016109c0565b50505050905090810190601f168015610a055780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a1505050505050565b600054600160a060020a031681565b600354606090600090829082908190610a5790600160a060020a03168763ffffffff61238316565b939a9299509097509550909350915050565b60035460609061079090600160a060020a03168363ffffffff6127e716565b60035460009061079090600160a060020a03168363ffffffff61293e16565b60035460009061079090600160a060020a03168363ffffffff612aa416565b600354610ae790600160a060020a031687878787878763ffffffff612b3016565b7fb2aef06aed6c32445d7d5744b2ba436bbe89a3a8c4d06a5f19ebc62b8d3f6b1a868686868686604051808781526020018060200186600160a060020a0316600160a060020a031681526020018060200185600160a060020a0316600160a060020a031681526020018481526020018381038352888181518152602001915080519060200190808383600083811015610978578181015183820152602001610960565b600354610ba790600160a060020a0316838363ffffffff6132e516565b604080518381526020810183905281517f565fdede77c2d98cf7ef898d489425bd022f8a537b7f7b8e28b0045866347fdf929181900390910190a15050565b60035460609061079090600160a060020a03168363ffffffff6133b216565b60035460009061079090600160a060020a03168363ffffffff61343e16565b610c2e83836134ca565b1515610c72576040805160e560020a62461bcd0281526020600482015260196024820152600080516020613742833981519152604482015290519081900360640190fd5b82600160a060020a0316635a2bf25a610cae604080519081016040528060138152602001600080516020613702833981519152815250856135a5565b6040805160e060020a63ffffffff85160281526004810192909252600160a060020a038516602483015251604480830192600092919082900301818387803b158015610cf957600080fd5b505af1158015610d0d573d6000803e3d6000fd5b50505050505050565b610d2083836134ca565b1515610d64576040805160e560020a62461bcd0281526020600482015260196024820152600080516020613742833981519152604482015290519081900360640190fd5b82600160a060020a031663f5866066610da06040805190810160405280600f81526020016000805160206136e2833981519152815250856135a5565b6040805160e060020a63ffffffff851602815260048101838152602482019283528651604483015286518793919260640190602085019080838360005b83811015610df5578181015183820152602001610ddd565b50505050905090810190601f168015610e225780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610cf957600080fd5b6000610e4e83836134ca565b1515610e92576040805160e560020a62461bcd0281526020600482015260196024820152600080516020613742833981519152604482015290519081900360640190fd5b82600160a060020a0316634c77e5ba610ece604080519081016040528060118152602001600080516020613722833981519152815250856135a5565b6040805160e060020a63ffffffff851602815260048101929092525160248083019260209291908290030181600087803b158015610f0b57600080fd5b505af1158015610f1f573d6000803e3d6000fd5b505050506040513d6020811015610f3557600080fd5b50519392505050565b610f4661366e565b610f5083836134ca565b1515610f94576040805160e560020a62461bcd0281526020600482015260196024820152600080516020613742833981519152604482015290519081900360640190fd5b60c06040519081016040528083815260200184600160a060020a031663a209a29c604080519081016040528060108152602001600080516020613762833981519152815250866040516020018083805190602001908083835b6020831061100c5780518252601f199092019160209182019101610fed565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b6020831061106c5780518252601f19909201916020918201910161104d565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812063ffffffff871660e060020a0282526004820152915160248084019550600094509092839003019050818387803b1580156110d157600080fd5b505af11580156110e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561110e57600080fd5b81019080805164010000000081111561112657600080fd5b8201602081018481111561113957600080fd5b815164010000000081118282018710171561115357600080fd5b50508452505060408051808201825260118082526000805160206137228339815191526020838101918252935195840195600160a060020a038b169550634c77e5ba948a9391019182918083835b602083106111c05780518252601f1990920191602091820191016111a1565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b602083106112205780518252601f199092019160209182019101611201565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a0283526004830152925160248083019650939450929083900301905081600087803b15801561128157600080fd5b505af1158015611295573d6000803e3d6000fd5b505050506040513d60208110156112ab57600080fd5b5051600160a060020a039081168252604080518082018252600f8082526000805160206136e28339815191526020838101918252935195840195948a169463a209a29c948a9391019182918083835b602083106113195780518252601f1990920191602091820191016112fa565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b602083106113795780518252601f19909201916020918201910161135a565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812063ffffffff871660e060020a0282526004820152915160248084019550600094509092839003019050818387803b1580156113de57600080fd5b505af11580156113f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561141b57600080fd5b81019080805164010000000081111561143357600080fd5b8201602081018481111561144657600080fd5b815164010000000081118282018710171561146057600080fd5b50508452505060408051808201825260138082526000805160206137028339815191526020838101918252935195840195600160a060020a038b169550634c77e5ba948a9391019182918083835b602083106114cd5780518252601f1990920191602091820191016114ae565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b6020831061152d5780518252601f19909201916020918201910161150e565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a0283526004830152925160248083019650939450929083900301905081600087803b15801561158e57600080fd5b505af11580156115a2573d6000803e3d6000fd5b505050506040513d60208110156115b857600080fd5b5051600160a060020a039081168252604080518082018252600e8082527f6170706c69636174696f6e5f69640000000000000000000000000000000000006020838101918252935195840195948a169463e82617fb948a9391019182918083835b602083106116385780518252601f199092019160209182019101611619565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b602083106116985780518252601f199092019160209182019101611679565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a0283526004830152925160248083019650939450929083900301905081600087803b1580156116f957600080fd5b505af115801561170d573d6000803e3d6000fd5b505050506040513d602081101561172357600080fd5b5051600281111561173057fe5b600281111561173b57fe5b90529392505050565b60006117548383600001516134ca565b156117a9576040805160e560020a62461bcd02815260206004820152601a60248201527f4170706c69636174696f6e20616c726561647920657869737473000000000000604482015290519081900360640190fd5b82600160a060020a031663ffb4f6236040805190810160405280600e81526020017f6170706c69636174696f6e5f696400000000000000000000000000000000000081525084600001516040516020018083805190602001908083835b602083106118255780518252601f199092019160209182019101611806565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b602083106118855780518252601f199092019160209182019101611866565b5181516020939093036101000a600019018019909116921691909117905260408051919093018190038120895163ffffffff881660e060020a02835260048301919091526024820152915160448084019550600094509092839003019050818387803b1580156118f457600080fd5b505af1158015611908573d6000803e3d6000fd5b5050505082600160a060020a031663f586606660408051908101604052806010815260200160008051602061376283398151915281525084600001516040516020018083805190602001908083835b602083106119765780518252601f199092019160209182019101611957565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b602083106119d65780518252601f1990920191602091820191016119b7565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208a82015163ffffffff891660e060020a02845260048401828152602485019687528151604486015281519298509096509493506064909201919085019080838360005b83811015611a58578181015183820152602001611a40565b50505050905090810190601f168015611a855780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015611aa557600080fd5b505af1158015611ab9573d6000803e3d6000fd5b5050505082600160a060020a0316635a2bf25a60408051908101604052806011815260200160008051602061372283398151915281525084600001516040516020018083805190602001908083835b60208310611b275780518252601f199092019160209182019101611b08565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b60208310611b875780518252601f199092019160209182019101611b68565b5181516020939093036101000a6000190180199091169216919091179052604080519190930181900381208984015163ffffffff881660e060020a0283526004830191909152600160a060020a03166024820152915160448084019550600094509092839003019050818387803b158015611c0157600080fd5b505af1158015611c15573d6000803e3d6000fd5b5050505082600160a060020a031663f58660666040805190810160405280600f81526020016000805160206136e283398151915281525084600001516040516020018083805190602001908083835b60208310611c835780518252601f199092019160209182019101611c64565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b60208310611ce35780518252601f199092019160209182019101611cc4565b51815160209384036101000a60001901801990921691161790526040805192909401829003822060608b015163ffffffff891660e060020a02845260048401828152602485019687528151604486015281519298509096509493506064909201919085019080838360005b83811015611d66578181015183820152602001611d4e565b50505050905090810190601f168015611d935780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015611db357600080fd5b505af1158015611dc7573d6000803e3d6000fd5b5050505082600160a060020a0316635a2bf25a60408051908101604052806013815260200160008051602061370283398151915281525084600001516040516020018083805190602001908083835b60208310611e355780518252601f199092019160209182019101611e16565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b60208310611e955780518252601f199092019160209182019101611e76565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812060808a015163ffffffff881660e060020a0283526004830191909152600160a060020a03166024820152915160448084019550600094509092839003019050818387803b158015611f1057600080fd5b505af1158015611f24573d6000803e3d6000fd5b5050505082600160a060020a031663ffb4f6236040805190810160405280601281526020016000805160206136c283398151915281525084600001516040516020018083805190602001908083835b60208310611f925780518252601f199092019160209182019101611f73565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b60208310611ff25780518252601f199092019160209182019101611fd3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208460a00151600281111561202f57fe5b6040518363ffffffff1660e060020a02815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b15801561207757600080fd5b505af115801561208b573d6000803e3d6000fd5b5050505082600160a060020a0316633eba9ed26040805190810160405280601681526020017f6170706c69636174696f6e5f726567697374657265640000000000000000000081525084608001516040516020018083805190602001908083835b6020831061210b5780518252601f1990920191602091820191016120ec565b6001836020036101000a03801982511681845116808217855250505050505090500182600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401925050506040516020818303038152906040526040518082805190602001908083835b602083106121965780518252601f199092019160209182019101612177565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812063ffffffff871660e060020a028252600482015260016024820152915160448084019550600094509092839003019050818387803b15801561220257600080fd5b505af1158015612216573d6000803e3d6000fd5b5050505082600160a060020a0316633eba9ed26040805190810160405280601281526020017f6170706c69636174696f6e2e657869737473000000000000000000000000000081525084600001516040516020018083805190602001908083835b602083106122965780518252601f199092019160209182019101612277565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b602083106122f65780518252601f1990920191602091820191016122d7565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812063ffffffff871660e060020a028252600482015260016024820152915160448084019550600094509092839003019050818387803b15801561236257600080fd5b505af1158015612376573d6000803e3d6000fd5b5060019695505050505050565b60606000606060008061239687876134ca565b15156123da576040805160e560020a62461bcd0281526020600482015260196024820152600080516020613742833981519152604482015290519081900360640190fd5b86600160a060020a031663a209a29c612416604080519081016040528060108152602001600080516020613762833981519152815250896135a5565b6040805160e060020a63ffffffff8516028152600481019290925251602480830192600092919082900301818387803b15801561245257600080fd5b505af1158015612466573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561248f57600080fd5b8101908080516401000000008111156124a757600080fd5b820160208101848111156124ba57600080fd5b81516401000000008111828201871017156124d457600080fd5b5050929190505050945086600160a060020a0316634c77e5ba61251a604080519081016040528060118152602001600080516020613722833981519152815250896135a5565b6040805160e060020a63ffffffff851602815260048101929092525160248083019260209291908290030181600087803b15801561255757600080fd5b505af115801561256b573d6000803e3d6000fd5b505050506040513d602081101561258157600080fd5b505160408051808201909152600f81526000805160206136e28339815191526020820152909450600160a060020a0388169063a209a29c906125c390896135a5565b6040805160e060020a63ffffffff8516028152600481019290925251602480830192600092919082900301818387803b1580156125ff57600080fd5b505af1158015612613573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561263c57600080fd5b81019080805164010000000081111561265457600080fd5b8201602081018481111561266757600080fd5b815164010000000081118282018710171561268157600080fd5b5050929190505050925086600160a060020a0316634c77e5ba6126c7604080519081016040528060138152602001600080516020613702833981519152815250896135a5565b6040805160e060020a63ffffffff851602815260048101929092525160248083019260209291908290030181600087803b15801561270457600080fd5b505af1158015612718573d6000803e3d6000fd5b505050506040513d602081101561272e57600080fd5b505160408051808201909152601281526000805160206136c28339815191526020820152909250600160a060020a0388169063e82617fb9061277090896135a5565b6040805160e060020a63ffffffff851602815260048101929092525160248083019260209291908290030181600087803b1580156127ad57600080fd5b505af11580156127c1573d6000803e3d6000fd5b505050506040513d60208110156127d757600080fd5b5051949793965091945092919050565b60606127f383836134ca565b1515612837576040805160e560020a62461bcd0281526020600482015260196024820152600080516020613742833981519152604482015290519081900360640190fd5b82600160a060020a031663a209a29c6128736040805190810160405280600f81526020016000805160206136e2833981519152815250856135a5565b6040805160e060020a63ffffffff8516028152600481019290925251602480830192600092919082900301818387803b1580156128af57600080fd5b505af11580156128c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156128ec57600080fd5b81019080805164010000000081111561290457600080fd5b8201602081018481111561291757600080fd5b815164010000000081118282018710171561293157600080fd5b5090979650505050505050565b600082600160a060020a03166317e7dd226040805190810160405280601681526020017f6170706c69636174696f6e5f7265676973746572656400000000000000000000815250846040516020018083805190602001908083835b602083106129b85780518252601f199092019160209182019101612999565b6001836020036101000a03801982511681845116808217855250505050505090500182600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401925050506040516020818303038152906040526040518082805190602001908083835b60208310612a435780518252601f199092019160209182019101612a24565b51815160209384036101000a60001901801990921691161790526040805192909401829003822063ffffffff881660e060020a0283526004830152925160248083019650939450929083900301905081600087803b158015610f0b57600080fd5b6000612ab083836134ca565b1515612af4576040805160e560020a62461bcd0281526020600482015260196024820152600080516020613742833981519152604482015290519081900360640190fd5b82600160a060020a031663e82617fb610ece6040805190810160405280601281526020016000805160206136c2833981519152815250856135a5565b612b3a87876134ca565b15612b8f576040805160e560020a62461bcd02815260206004820152601a60248201527f4170706c69636174696f6e20616c726561647920657869737473000000000000604482015290519081900360640190fd5b86600160a060020a031663ffb4f623612bdd6040805190810160405280600e81526020017f6170706c69636174696f6e5f6964000000000000000000000000000000000000815250896135a5565b6040805160e060020a63ffffffff85160281526004810192909252602482018a905251604480830192600092919082900301818387803b158015612c2057600080fd5b505af1158015612c34573d6000803e3d6000fd5b5050505086600160a060020a031663f5866066612c74604080519081016040528060108152602001600080516020613762833981519152815250896135a5565b6040805160e060020a63ffffffff851602815260048101838152602482019283528a5160448301528a518b93919260640190602085019080838360005b83811015612cc9578181015183820152602001612cb1565b50505050905090810190601f168015612cf65780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015612d1657600080fd5b505af1158015612d2a573d6000803e3d6000fd5b5050505086600160a060020a0316635a2bf25a612d6a604080519081016040528060118152602001600080516020613722833981519152815250896135a5565b6040805160e060020a63ffffffff85160281526004810192909252600160a060020a038816602483015251604480830192600092919082900301818387803b158015612db557600080fd5b505af1158015612dc9573d6000803e3d6000fd5b5050505086600160a060020a031663f5866066612e096040805190810160405280600f81526020016000805160206136e2833981519152815250896135a5565b6040805160e060020a63ffffffff851602815260048101838152602482019283528851604483015288518993919260640190602085019080838360005b83811015612e5e578181015183820152602001612e46565b50505050905090810190601f168015612e8b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015612eab57600080fd5b505af1158015612ebf573d6000803e3d6000fd5b5050505086600160a060020a0316635a2bf25a612eff604080519081016040528060138152602001600080516020613702833981519152815250896135a5565b6040805160e060020a63ffffffff85160281526004810192909252600160a060020a038616602483015251604480830192600092919082900301818387803b158015612f4a57600080fd5b505af1158015612f5e573d6000803e3d6000fd5b5050505086600160a060020a031663ffb4f623612f9e6040805190810160405280601281526020016000805160206136c2833981519152815250896135a5565b6040805160e060020a63ffffffff851602815260048101929092526024820185905251604480830192600092919082900301818387803b158015612fe157600080fd5b505af1158015612ff5573d6000803e3d6000fd5b5050505086600160a060020a0316633eba9ed26040805190810160405280601681526020017f6170706c69636174696f6e5f7265676973746572656400000000000000000000815250846040516020018083805190602001908083835b602083106130715780518252601f199092019160209182019101613052565b6001836020036101000a03801982511681845116808217855250505050505090500182600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401925050506040516020818303038152906040526040518082805190602001908083835b602083106130fc5780518252601f1990920191602091820191016130dd565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812063ffffffff871660e060020a028252600482015260016024820152915160448084019550600094509092839003019050818387803b15801561316857600080fd5b505af115801561317c573d6000803e3d6000fd5b5050505086600160a060020a0316633eba9ed26040805190810160405280601281526020017f6170706c69636174696f6e2e6578697374730000000000000000000000000000815250886040516020018083805190602001908083835b602083106131f85780518252601f1990920191602091820191016131d9565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b602083106132585780518252601f199092019160209182019101613239565b5181516020939093036101000a60001901801990911692169190911790526040805191909301819003812063ffffffff871660e060020a028252600482015260016024820152915160448084019550600094509092839003019050818387803b1580156132c457600080fd5b505af11580156132d8573d6000803e3d6000fd5b5050505050505050505050565b6132ef83836134ca565b1515613333576040805160e560020a62461bcd0281526020600482015260196024820152600080516020613742833981519152604482015290519081900360640190fd5b82600160a060020a031663ffb4f62361336f6040805190810160405280601281526020016000805160206136c2833981519152815250856135a5565b6040805160e060020a63ffffffff851602815260048101929092526024820185905251604480830192600092919082900301818387803b158015610cf957600080fd5b60606133be83836134ca565b1515613402576040805160e560020a62461bcd0281526020600482015260196024820152600080516020613742833981519152604482015290519081900360640190fd5b82600160a060020a031663a209a29c612873604080519081016040528060108152602001600080516020613762833981519152815250856135a5565b600061344a83836134ca565b151561348e576040805160e560020a62461bcd0281526020600482015260196024820152600080516020613742833981519152604482015290519081900360640190fd5b82600160a060020a0316634c77e5ba610ece604080519081016040528060138152602001600080516020613702833981519152815250856135a5565b600082600160a060020a03166317e7dd226040805190810160405280601281526020017f6170706c69636174696f6e2e6578697374730000000000000000000000000000815250846040516020018083805190602001908083835b602083106135445780518252601f199092019160209182019101613525565b51815160001960209485036101000a01908116901991909116179052920193845250604080518085038152938201908190528351939450928392509084019080838360208310612a435780518252601f199092019160209182019101612a24565b600082826040516020018083805190602001908083835b602083106135db5780518252601f1990920191602091820191016135bc565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b6020831061363b5780518252601f19909201916020918201910161361c565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209695505050505050565b60c06040519081016040528060008152602001606081526020016000600160a060020a03168152602001606081526020016000600160a060020a03168152602001600060028111156136bc57fe5b90529056006170706c69636174696f6e5f73746174757300000000000000000000000000006170706c69636174696f6e5f75726c00000000000000000000000000000000006170706c69636174696f6e5f61646472657373000000000000000000000000006170706c69636174696f6e5f6f776e65720000000000000000000000000000004170706c69636174696f6e206973206e6f7420657869737473000000000000006170706c69636174696f6e5f6e616d6500000000000000000000000000000000a165627a7a723058209f026069cf0a2273bb0acba03028f90bbab4907c01f5b19b7b8466137a1081bc0029";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_KILL = "kill";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_CREATEAPPLICATION = "createApplication";

    public static final String FUNC_RETRIEVEAPPLICATION = "retrieveApplication";

    public static final String FUNC_SAVE = "save";

    public static final String FUNC_GET = "get";

    public static final String FUNC_ISREGISTERED = "isRegistered";

    public static final String FUNC_GETAPPLICATIONNAME = "getApplicationName";

    public static final String FUNC_GETAPPLICATIONOWNER = "getApplicationOwner";

    public static final String FUNC_GETAPPLICATIONURL = "getApplicationUrl";

    public static final String FUNC_SETAPPLICATIONURL = "setApplicationUrl";

    public static final String FUNC_GETAPPLICATIONADDRESS = "getApplicationAddress";

    public static final String FUNC_SETAPPLICATIONADDRESS = "setApplicationAddress";

    public static final String FUNC_GETAPPLICATIONSTATUS = "getApplicationStatus";

    public static final String FUNC_SETAPPLICATIONSTATUS = "setApplicationStatus";

    public static final Event APPLICATIONSAVED_EVENT = new Event("ApplicationSaved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event APPLICATIONURLUPDATED_EVENT = new Event("ApplicationUrlUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event APPLICATIONADDRESSUPDATED_EVENT = new Event("ApplicationAddressUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event APPLICATIONSTATUSUPDATED_EVENT = new Event("ApplicationStatusUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("89354", "0x1ba750c8852850825931fcc395e711a24c6ce51b");
    }

    protected ApplicationStorage(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ApplicationStorage(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> kill() {
        final Function function = new Function(
                FUNC_KILL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<ApplicationStorage> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _config) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_config)));
        return deployRemoteCall(ApplicationStorage.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<ApplicationStorage> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _config) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_config)));
        return deployRemoteCall(ApplicationStorage.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<ApplicationSavedEventResponse> getApplicationSavedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPLICATIONSAVED_EVENT, transactionReceipt);
        ArrayList<ApplicationSavedEventResponse> responses = new ArrayList<ApplicationSavedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApplicationSavedEventResponse typedResponse = new ApplicationSavedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.url = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.appAddr = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApplicationSavedEventResponse> applicationSavedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApplicationSavedEventResponse>() {
            @Override
            public ApplicationSavedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPLICATIONSAVED_EVENT, log);
                ApplicationSavedEventResponse typedResponse = new ApplicationSavedEventResponse();
                typedResponse.log = log;
                typedResponse.appId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.owner = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.url = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.appAddr = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ApplicationSavedEventResponse> applicationSavedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPLICATIONSAVED_EVENT));
        return applicationSavedEventObservable(filter);
    }

    public List<ApplicationUrlUpdatedEventResponse> getApplicationUrlUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPLICATIONURLUPDATED_EVENT, transactionReceipt);
        ArrayList<ApplicationUrlUpdatedEventResponse> responses = new ArrayList<ApplicationUrlUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApplicationUrlUpdatedEventResponse typedResponse = new ApplicationUrlUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.url = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApplicationUrlUpdatedEventResponse> applicationUrlUpdatedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApplicationUrlUpdatedEventResponse>() {
            @Override
            public ApplicationUrlUpdatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPLICATIONURLUPDATED_EVENT, log);
                ApplicationUrlUpdatedEventResponse typedResponse = new ApplicationUrlUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.appId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.url = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ApplicationUrlUpdatedEventResponse> applicationUrlUpdatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPLICATIONURLUPDATED_EVENT));
        return applicationUrlUpdatedEventObservable(filter);
    }

    public List<ApplicationAddressUpdatedEventResponse> getApplicationAddressUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPLICATIONADDRESSUPDATED_EVENT, transactionReceipt);
        ArrayList<ApplicationAddressUpdatedEventResponse> responses = new ArrayList<ApplicationAddressUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApplicationAddressUpdatedEventResponse typedResponse = new ApplicationAddressUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.appAddr = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApplicationAddressUpdatedEventResponse> applicationAddressUpdatedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApplicationAddressUpdatedEventResponse>() {
            @Override
            public ApplicationAddressUpdatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPLICATIONADDRESSUPDATED_EVENT, log);
                ApplicationAddressUpdatedEventResponse typedResponse = new ApplicationAddressUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.appId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.appAddr = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ApplicationAddressUpdatedEventResponse> applicationAddressUpdatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPLICATIONADDRESSUPDATED_EVENT));
        return applicationAddressUpdatedEventObservable(filter);
    }

    public List<ApplicationStatusUpdatedEventResponse> getApplicationStatusUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPLICATIONSTATUSUPDATED_EVENT, transactionReceipt);
        ArrayList<ApplicationStatusUpdatedEventResponse> responses = new ArrayList<ApplicationStatusUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApplicationStatusUpdatedEventResponse typedResponse = new ApplicationStatusUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApplicationStatusUpdatedEventResponse> applicationStatusUpdatedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApplicationStatusUpdatedEventResponse>() {
            @Override
            public ApplicationStatusUpdatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPLICATIONSTATUSUPDATED_EVENT, log);
                ApplicationStatusUpdatedEventResponse typedResponse = new ApplicationStatusUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.appId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ApplicationStatusUpdatedEventResponse> applicationStatusUpdatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPLICATIONSTATUSUPDATED_EVENT));
        return applicationStatusUpdatedEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> createApplication(BigInteger _id, String _name, String _owner, String _url, String _appAddr, BigInteger _status) {
        final Function function = new Function(
                FUNC_CREATEAPPLICATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.Utf8String(_url), 
                new org.web3j.abi.datatypes.Address(_appAddr), 
                new org.web3j.abi.datatypes.generated.Uint256(_status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple5<String, String, String, String, BigInteger>> retrieveApplication(BigInteger _id) {
        final Function function = new Function(FUNC_RETRIEVEAPPLICATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, BigInteger>>(
                new Callable<Tuple5<String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> save(BigInteger appId, String name, String owner, String url, String appAddr, BigInteger status) {
        final Function function = new Function(
                FUNC_SAVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(appId), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Utf8String(url), 
                new org.web3j.abi.datatypes.Address(appAddr), 
                new org.web3j.abi.datatypes.generated.Uint256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple5<String, String, String, String, BigInteger>> get(BigInteger appId) {
        final Function function = new Function(FUNC_GET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(appId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, BigInteger>>(
                new Callable<Tuple5<String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<Boolean> isRegistered(String _applicationAddress) {
        final Function function = new Function(FUNC_ISREGISTERED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_applicationAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> getApplicationName(BigInteger appId) {
        final Function function = new Function(FUNC_GETAPPLICATIONNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(appId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getApplicationOwner(BigInteger appId) {
        final Function function = new Function(FUNC_GETAPPLICATIONOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(appId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getApplicationUrl(BigInteger appId) {
        final Function function = new Function(FUNC_GETAPPLICATIONURL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(appId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setApplicationUrl(BigInteger appId, String url) {
        final Function function = new Function(
                FUNC_SETAPPLICATIONURL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(appId), 
                new org.web3j.abi.datatypes.Utf8String(url)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getApplicationAddress(BigInteger appId) {
        final Function function = new Function(FUNC_GETAPPLICATIONADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(appId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setApplicationAddress(BigInteger appId, String appAddr) {
        final Function function = new Function(
                FUNC_SETAPPLICATIONADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(appId), 
                new org.web3j.abi.datatypes.Address(appAddr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getApplicationStatus(BigInteger appId) {
        final Function function = new Function(FUNC_GETAPPLICATIONSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(appId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setApplicationStatus(BigInteger appId, BigInteger status) {
        final Function function = new Function(
                FUNC_SETAPPLICATIONSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(appId), 
                new org.web3j.abi.datatypes.generated.Uint256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static ApplicationStorage load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ApplicationStorage(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static ApplicationStorage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ApplicationStorage(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public interface ApplicationStorageEvent extends SmartContractEvent {
    }

    public static class ApplicationSavedEventResponse implements ApplicationStorageEvent {
        public Log log;

        public BigInteger appId;

        public String name;

        public String owner;

        public String url;

        public String appAddr;

        public BigInteger status;
    }

    public static class ApplicationUrlUpdatedEventResponse implements ApplicationStorageEvent {
        public Log log;

        public BigInteger appId;

        public String url;
    }

    public static class ApplicationAddressUpdatedEventResponse implements ApplicationStorageEvent {
        public Log log;

        public BigInteger appId;

        public String appAddr;
    }

    public static class ApplicationStatusUpdatedEventResponse implements ApplicationStorageEvent {
        public Log log;

        public BigInteger appId;

        public BigInteger status;
    }
}
