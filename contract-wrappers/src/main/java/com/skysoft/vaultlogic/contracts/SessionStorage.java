package com.skysoft.vaultlogic.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.contracts.SmartContractEvent;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class SessionStorage extends Contract {
    private static final String BINARY = "0x60806040523480156200001157600080fd5b50604051602080620032de833981018060405281019080805190602001909291905050508060006040805190810160405280600f81526020017f73657373696f6e2d73746f726167650000000000000000000000000000000000815250336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060019080519060200190620000c6929190620005bf565b50508173ffffffffffffffffffffffffffffffffffffffff1663713b563f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200012d57600080fd5b505af115801562000142573d6000803e3d6000fd5b505050506040513d60208110156200015957600080fd5b8101908080519060200190929190505050600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff1663d0496d6a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200020f57600080fd5b505af115801562000224573d6000803e3d6000fd5b505050506040513d60208110156200023b57600080fd5b8101908080519060200190929190505050600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e60016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620003845780601f10620003585761010080835404028352916020019162000384565b820191906000526020600020905b8154815290600101906020018083116200036657829003601f168201915b505092505050602060405180830381600087803b158015620003a557600080fd5b505af1158015620003ba573d6000803e3d6000fd5b505050506040513d6020811015620003d157600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1614151562000484578073ffffffffffffffffffffffffffffffffffffffff166341c0e1b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156200046a57600080fd5b505af11580156200047f573d6000803e3d6000fd5b505050505b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2c298be60016040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156200057c5780601f1062000550576101008083540402835291602001916200057c565b820191906000526020600020905b8154815290600101906020018083116200055e57829003601f168201915b505092505050600060405180830381600087803b1580156200059d57600080fd5b505af1158015620005b2573d6000803e3d6000fd5b505050505050506200066e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200060257805160ff191683800117855562000633565b8280016001018555821562000633579182015b828111156200063257825182559160200191906001019062000615565b5b50905062000642919062000646565b5090565b6200066b91905b80821115620006675760008160009055506001016200064d565b5090565b90565b612c60806200067e6000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100ca578063402ff0db1461015a57806341c0e1b51461020e5780635a1695af146102255780635c622a0e1461026a5780637e55698e146102ab57806382e40813146103515780638da5cb5b14610388578063901135b7146103df578063985d7b7d1461048c5780639d46ec87146104cd578063c9d3f9811461057a578063fd198b2c14610647575b600080fd5b3480156100d657600080fd5b506100df610680565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561011f578082015181840152602081019050610104565b50505050905090810190601f16801561014c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016657600080fd5b506101856004803603810190808035906020019092919050505061071e565b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156101d15780820151818401526020810190506101b6565b50505050905090810190601f1680156101fe5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561021a57600080fd5b5061022361077c565b005b34801561023157600080fd5b5061025060048036038101908080359060200190929190505050610844565b604051808215151515815260200191505060405180910390f35b34801561027657600080fd5b5061029560048036038101908080359060200190929190505050610898565b6040518082815260200191505060405180910390f35b3480156102b757600080fd5b506102d6600480360381019080803590602001909291905050506108f7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103165780820151818401526020810190506102fb565b50505050905090810190601f1680156103435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561035d57600080fd5b50610386600480360381019080803590602001909291908035906020019092919050505061094b565b005b34801561039457600080fd5b5061039d6109e6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103eb57600080fd5b5061040a60048036038101908080359060200190929190505050610a0b565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610450578082015181840152602081019050610435565b50505050905090810190601f16801561047d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561049857600080fd5b506104b760048036038101908080359060200190929190505050610a2a565b6040518082815260200191505060405180910390f35b3480156104d957600080fd5b506104f860048036038101908080359060200190929190505050610a7e565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561053e578082015181840152602081019050610523565b50505050905090810190601f16801561056b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561058657600080fd5b506106456004803603810190808035906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610a9d565b005b34801561065357600080fd5b5061067e60048036038101908080359060200190929190803515159060200190929190505050610c18565b005b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107165780601f106106eb57610100808354040283529160200191610716565b820191906000526020600020905b8154815290600101906020018083116106f957829003601f168201915b505050505081565b60006060600061076f84600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c6990919063ffffffff16565b9250925092509193909250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141515610840576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6f6e6c79206f776e657220616c6c6f776564000000000000000000000000000081525060200191505060405180910390fd5b6000ff5b600061089182600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661128790919063ffffffff16565b9050919050565b60006108e582600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661144e90919063ffffffff16565b60048111156108f057fe5b9050919050565b606061094482600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661162090919063ffffffff16565b9050919050565b6109a38282600481111561095b57fe5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661183d9092919063ffffffff16565b7f150b944d2f668fb8c44fa57a4dd1c95f72d46a1efea6a92a497a002cf491f47b8282604051808381526020018281526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006060610a1883610a2a565b9150610a23836108f7565b9050915091565b6000610a7782600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166119ef90919063ffffffff16565b9050919050565b60006060610a8b83610898565b9150610a96836108f7565b9050915091565b610af08585858585600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611bb69095949392919063ffffffff16565b7f4877137176325aa35905a2381bdc594ccaf7b63c49d97380c22e2269c6ac96498585858585604051808681526020018581526020018060200184815260200180602001838103835286818151815260200191508051906020019080838360005b83811015610b6c578082015181840152602081019050610b51565b50505050905090810190601f168015610b995780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610bd2578082015181840152602081019050610bb7565b50505050905090810190601f168015610bff5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a15050505050565b610c658282600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166124699092919063ffffffff16565b5050565b600060606000610c798585612692565b1515610ced576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f53657373696f6e206973206e6f7420657869737473000000000000000000000081525060200191505060405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663e82617fb6040805190810160405280601681526020017f73657373696f6e5f6170706c69636174696f6e5f696400000000000000000000815250866040516020018083805190602001908083835b602083101515610d785780518252602082019150602081019050602083039250610d53565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515610de85780518252602082019150602081019050602083039250610dc3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015610e6f57600080fd5b505af1158015610e83573d6000803e3d6000fd5b505050506040513d6020811015610e9957600080fd5b810190808051906020019092919050505092508473ffffffffffffffffffffffffffffffffffffffff1663a209a29c6040805190810160405280600f81526020017f73657373696f6e5f785f746f6b656e0000000000000000000000000000000000815250866040516020018083805190602001908083835b602083101515610f375780518252602082019150602081019050602083039250610f12565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515610fa75780518252602082019150602081019050602083039250610f82565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b15801561102e57600080fd5b505af1158015611042573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561106c57600080fd5b81019080805164010000000081111561108457600080fd5b8281019050602081018481111561109a57600080fd5b81518560018202830111640100000000821117156110b757600080fd5b505092919050505091508473ffffffffffffffffffffffffffffffffffffffff1663e82617fb6040805190810160405280600e81526020017f73657373696f6e5f737461747573000000000000000000000000000000000000815250866040516020018083805190602001908083835b60208310151561114c5780518252602082019150602081019050602083039250611127565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156111bc5780518252602082019150602081019050602083039250611197565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561124357600080fd5b505af1158015611257573d6000803e3d6000fd5b505050506040513d602081101561126d57600080fd5b810190808051906020019092919050505090509250925092565b60008273ffffffffffffffffffffffffffffffffffffffff166317e7dd226040805190810160405280601a81526020017f73657373696f6e5f6861735f6163746976655f636173685f696e000000000000815250846040516020018083805190602001908083835b60208310151561131457805182526020820191506020810190506020830392506112ef565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611384578051825260208201915060208101905060208303925061135f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561140b57600080fd5b505af115801561141f573d6000803e3d6000fd5b505050506040513d602081101561143557600080fd5b8101908080519060200190929190505050905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e82617fb6040805190810160405280600e81526020017f73657373696f6e5f737461747573000000000000000000000000000000000000815250846040516020018083805190602001908083835b6020831015156114db57805182526020820191506020810190506020830392506114b6565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561154b5780518252602082019150602081019050602083039250611526565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156115d257600080fd5b505af11580156115e6573d6000803e3d6000fd5b505050506040513d60208110156115fc57600080fd5b8101908080519060200190929190505050600481111561161857fe5b905092915050565b60608273ffffffffffffffffffffffffffffffffffffffff1663a209a29c6040805190810160405280600f81526020017f73657373696f6e5f785f746f6b656e0000000000000000000000000000000000815250846040516020018083805190602001908083835b6020831015156116ad5780518252602082019150602081019050602083039250611688565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561171d57805182526020820191506020810190506020830392506116f8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b1580156117a457600080fd5b505af11580156117b8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156117e257600080fd5b8101908080516401000000008111156117fa57600080fd5b8281019050602081018481111561181057600080fd5b815185600182028301116401000000008211171561182d57600080fd5b5050929190505050905092915050565b8273ffffffffffffffffffffffffffffffffffffffff1663ffb4f6236040805190810160405280600e81526020017f73657373696f6e5f737461747573000000000000000000000000000000000000815250846040516020018083805190602001908083835b6020831015156118c857805182526020820191506020810190506020830392506118a3565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156119385780518252602082019150602081019050602083039250611913565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902083600481111561197157fe5b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b1580156119d257600080fd5b505af11580156119e6573d6000803e3d6000fd5b50505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e82617fb6040805190810160405280601681526020017f73657373696f6e5f6170706c69636174696f6e5f696400000000000000000000815250846040516020018083805190602001908083835b602083101515611a7c5780518252602082019150602081019050602083039250611a57565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611aec5780518252602082019150602081019050602083039250611ac7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015611b7357600080fd5b505af1158015611b87573d6000803e3d6000fd5b505050506040513d6020811015611b9d57600080fd5b8101908080519060200190929190505050905092915050565b611bc08686612692565b151515611c35576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f53657373696f6e20697320616c7265616479206578697374730000000000000081525060200191505060405180910390fd5b611c5e818773ffffffffffffffffffffffffffffffffffffffff1661285990919063ffffffff16565b1515611cd2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4b696f736b206973206e6f74206578697374730000000000000000000000000081525060200191505060405180910390fd5b611cfb848773ffffffffffffffffffffffffffffffffffffffff16612a6d90919063ffffffff16565b1515611d6f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4170706c69636174696f6e206973206e6f74206578697374730000000000000081525060200191505060405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663ffb4f6236040805190810160405280601681526020017f73657373696f6e5f6170706c69636174696f6e5f696400000000000000000000815250876040516020018083805190602001908083835b602083101515611dfa5780518252602082019150602081019050602083039250611dd5565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611e6a5780518252602082019150602081019050602083039250611e45565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b158015611ef957600080fd5b505af1158015611f0d573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663f58660666040805190810160405280600f81526020017f73657373696f6e5f785f746f6b656e0000000000000000000000000000000000815250876040516020018083805190602001908083835b602083101515611f9c5780518252602082019150602081019050602083039250611f77565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561200c5780518252602082019150602081019050602083039250611fe7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156120b3578082015181840152602081019050612098565b50505050905090810190601f1680156120e05780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561210057600080fd5b505af1158015612114573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663ffb4f6236040805190810160405280600e81526020017f73657373696f6e5f737461747573000000000000000000000000000000000000815250876040516020018083805190602001908083835b6020831015156121a3578051825260208201915060208101905060208303925061217e565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561221357805182526020820191506020810190506020830392506121ee565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b1580156122a257600080fd5b505af11580156122b6573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff16633eba9ed26040805190810160405280600e81526020017f73657373696f6e2e657869737473000000000000000000000000000000000000815250876040516020018083805190602001908083835b6020831015156123455780518252602082019150602081019050602083039250612320565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156123b55780518252602082019150602081019050602083039250612390565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060016040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018215151515815260200192505050600060405180830381600087803b15801561244957600080fd5b505af115801561245d573d6000803e3d6000fd5b50505050505050505050565b6124738383612692565b15156124e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f53657373696f6e206973206e6f7420657869737473000000000000000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16633eba9ed26040805190810160405280601a81526020017f73657373696f6e5f6861735f6163746976655f636173685f696e000000000000815250846040516020018083805190602001908083835b602083101515612572578051825260208201915060208101905060208303925061254d565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156125e257805182526020820191506020810190506020830392506125bd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018215151515815260200192505050600060405180830381600087803b15801561267557600080fd5b505af1158015612689573d6000803e3d6000fd5b50505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff166317e7dd226040805190810160405280600e81526020017f73657373696f6e2e657869737473000000000000000000000000000000000000815250846040516020018083805190602001908083835b60208310151561271f57805182526020820191506020810190506020830392506126fa565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561278f578051825260208201915060208101905060208303925061276a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561281657600080fd5b505af115801561282a573d6000803e3d6000fd5b505050506040513d602081101561284057600080fd5b8101908080519060200190929190505050905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff166317e7dd226040805190810160405280600c81526020017f6b696f736b2e6578697374730000000000000000000000000000000000000000815250846040516020018083805190602001908083835b6020831015156128e657805182526020820191506020810190506020830392506128c1565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156129395780518252602082019150602081019050602083039250612914565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156129a3578051825260208201915060208101905060208303925061297e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015612a2a57600080fd5b505af1158015612a3e573d6000803e3d6000fd5b505050506040513d6020811015612a5457600080fd5b8101908080519060200190929190505050905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff166317e7dd226040805190810160405280601281526020017f6170706c69636174696f6e2e6578697374730000000000000000000000000000815250846040516020018083805190602001908083835b602083101515612afa5780518252602082019150602081019050602083039250612ad5565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515612b6a5780518252602082019150602081019050602083039250612b45565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015612bf157600080fd5b505af1158015612c05573d6000803e3d6000fd5b505050506040513d6020811015612c1b57600080fd5b81019080805190602001909291905050509050929150505600a165627a7a723058209957ea207b472df938ce018676beb53cbef746d11fc3e58d470da3cc6b777a3b0029";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_KILL = "kill";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SAVE = "save";

    public static final String FUNC_GETSESSION = "getSession";

    public static final String FUNC_SETHASACTIVECASHIN = "setHasActiveCashIn";

    public static final String FUNC_ISHASACTIVECASHIN = "isHasActiveCashIn";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_GETSTATUSANDXTOKEN = "getStatusAndXToken";

    public static final String FUNC_GETAPPID = "getAppId";

    public static final String FUNC_GETXTOKEN = "getXToken";

    public static final String FUNC_GETAPPIDANDXTOKEN = "getAppIdAndXToken";

    public static final String FUNC_SETSTATUS = "setStatus";

    public static final Event SAVED_EVENT = new Event("Saved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event STATUSUPDATED_EVENT = new Event("StatusUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ACTIVECASHIN_EVENT = new Event("ActiveCashIn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("77142", "0xebfabda9243dbcf2a85a9b5afc5b98ebbfcd64c2");
    }

    protected SessionStorage(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SessionStorage(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> kill() {
        final Function function = new Function(
                FUNC_KILL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<SessionStorage> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _config) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_config)));
        return deployRemoteCall(SessionStorage.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<SessionStorage> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _config) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_config)));
        return deployRemoteCall(SessionStorage.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<SavedEventResponse> getSavedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SAVED_EVENT, transactionReceipt);
        ArrayList<SavedEventResponse> responses = new ArrayList<SavedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SavedEventResponse typedResponse = new SavedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.appId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.xToken = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.kioskId = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SavedEventResponse> savedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, SavedEventResponse>() {
            @Override
            public SavedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SAVED_EVENT, log);
                SavedEventResponse typedResponse = new SavedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.appId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.xToken = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.kioskId = (String) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<SavedEventResponse> savedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SAVED_EVENT));
        return savedEventObservable(filter);
    }

    public List<StatusUpdatedEventResponse> getStatusUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STATUSUPDATED_EVENT, transactionReceipt);
        ArrayList<StatusUpdatedEventResponse> responses = new ArrayList<StatusUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StatusUpdatedEventResponse typedResponse = new StatusUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StatusUpdatedEventResponse> statusUpdatedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, StatusUpdatedEventResponse>() {
            @Override
            public StatusUpdatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(STATUSUPDATED_EVENT, log);
                StatusUpdatedEventResponse typedResponse = new StatusUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<StatusUpdatedEventResponse> statusUpdatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(STATUSUPDATED_EVENT));
        return statusUpdatedEventObservable(filter);
    }

    public List<ActiveCashInEventResponse> getActiveCashInEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACTIVECASHIN_EVENT, transactionReceipt);
        ArrayList<ActiveCashInEventResponse> responses = new ArrayList<ActiveCashInEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ActiveCashInEventResponse typedResponse = new ActiveCashInEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._sessionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._flag = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ActiveCashInEventResponse> activeCashInEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ActiveCashInEventResponse>() {
            @Override
            public ActiveCashInEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ACTIVECASHIN_EVENT, log);
                ActiveCashInEventResponse typedResponse = new ActiveCashInEventResponse();
                typedResponse.log = log;
                typedResponse._sessionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._flag = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ActiveCashInEventResponse> activeCashInEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACTIVECASHIN_EVENT));
        return activeCashInEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> save(BigInteger sessionId, BigInteger appId, String xToken, BigInteger status, String kioskId) {
        final Function function = new Function(
                FUNC_SAVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(sessionId), 
                new org.web3j.abi.datatypes.generated.Uint256(appId), 
                new org.web3j.abi.datatypes.Utf8String(xToken), 
                new org.web3j.abi.datatypes.generated.Uint256(status), 
                new org.web3j.abi.datatypes.Utf8String(kioskId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<BigInteger, String, BigInteger>> getSession(BigInteger index) {
        final Function function = new Function(FUNC_GETSESSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<BigInteger, String, BigInteger>>(
                new Callable<Tuple3<BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setHasActiveCashIn(BigInteger _sessionId, Boolean _flag) {
        final Function function = new Function(
                FUNC_SETHASACTIVECASHIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_sessionId), 
                new org.web3j.abi.datatypes.Bool(_flag)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isHasActiveCashIn(BigInteger _sessionId) {
        final Function function = new Function(FUNC_ISHASACTIVECASHIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_sessionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> getStatus(BigInteger index) {
        final Function function = new Function(FUNC_GETSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<BigInteger, String>> getStatusAndXToken(BigInteger index) {
        final Function function = new Function(FUNC_GETSTATUSANDXTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<BigInteger, String>>(
                new Callable<Tuple2<BigInteger, String>>() {
                    @Override
                    public Tuple2<BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getAppId(BigInteger index) {
        final Function function = new Function(FUNC_GETAPPID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getXToken(BigInteger index) {
        final Function function = new Function(FUNC_GETXTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<BigInteger, String>> getAppIdAndXToken(BigInteger index) {
        final Function function = new Function(FUNC_GETAPPIDANDXTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<BigInteger, String>>(
                new Callable<Tuple2<BigInteger, String>>() {
                    @Override
                    public Tuple2<BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setStatus(BigInteger index, BigInteger status) {
        final Function function = new Function(
                FUNC_SETSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index), 
                new org.web3j.abi.datatypes.generated.Uint256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static SessionStorage load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SessionStorage(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static SessionStorage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SessionStorage(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public interface SessionStorageEvent extends SmartContractEvent {
    }

    public static class SavedEventResponse implements SessionStorageEvent {
        public Log log;

        public BigInteger sessionId;

        public BigInteger appId;

        public String xToken;

        public BigInteger status;

        public String kioskId;
    }

    public static class StatusUpdatedEventResponse implements SessionStorageEvent {
        public Log log;

        public BigInteger index;

        public BigInteger status;
    }

    public static class ActiveCashInEventResponse implements SessionStorageEvent {
        public Log log;

        public BigInteger _sessionId;

        public Boolean _flag;
    }
}
