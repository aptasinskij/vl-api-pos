package com.skysoft.vaultlogic.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.contracts.SmartContractEvent;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class SessionStorage extends Contract {
    private static final String BINARY = "0x60806040523480156200001157600080fd5b5060405160208062002fd98339810180604052810190808051906020019092919050505080336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff161415151562000106576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f53797374656d2073746174652076696f6c6174696f6e0000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e59c5296200019e620002ae640100000000026401000000009004565b306040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156200023e57808201518184015260208101905062000221565b50505050905090810190601f1680156200026c5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156200028d57600080fd5b505af1158015620002a2573d6000803e3d6000fd5b505050505050620002eb565b60606040805190810160405280600f81526020017f73657373696f6e2d73746f726167650000000000000000000000000000000000815250905090565b612cde80620002fb6000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063402ff0db146100b45780635a1695af146101685780635c622a0e146101ad5780637e55698e146101ee57806382e40813146102945780638da5cb5b146102cb578063901135b714610322578063985d7b7d146103cf5780639d46ec8714610410578063c9d3f981146104bd578063fd198b2c1461058a575b600080fd5b3480156100c057600080fd5b506100df600480360381019080803590602001909291905050506105c3565b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561012b578082015181840152602081019050610110565b50505050905090810190601f1680156101585780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561017457600080fd5b506101936004803603810190808035906020019092919050505061063c565b604051808215151515815260200191505060405180910390f35b3480156101b957600080fd5b506101d8600480360381019080803590602001909291905050506106ab565b6040518082815260200191505060405180910390f35b3480156101fa57600080fd5b5061021960048036038101908080359060200190929190505050610725565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025957808201518184015260208101905061023e565b50505050905090810190601f1680156102865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a057600080fd5b506102c96004803603810190808035906020019092919080359060200190929190505050610794565b005b3480156102d757600080fd5b506102e061084a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561032e57600080fd5b5061034d6004803603810190808035906020019092919050505061086f565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610393578082015181840152602081019050610378565b50505050905090810190601f1680156103c05780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156103db57600080fd5b506103fa6004803603810190808035906020019092919050505061088e565b6040518082815260200191505060405180910390f35b34801561041c57600080fd5b5061043b600480360381019080803590602001909291905050506108fd565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610481578082015181840152602081019050610466565b50505050905090810190601f1680156104ae5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156104c957600080fd5b506105886004803603810190808035906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061091c565b005b34801561059657600080fd5b506105c160048036038101908080359060200190929190803515159060200190929190505050610ab2565b005b60006060600061062f8461060b6040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250610b1e565b73ffffffffffffffffffffffffffffffffffffffff16610ce790919063ffffffff16565b9250925092509193909250565b60006106a4826106806040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250610b1e565b73ffffffffffffffffffffffffffffffffffffffff1661130590919063ffffffff16565b9050919050565b6000610713826106ef6040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250610b1e565b73ffffffffffffffffffffffffffffffffffffffff166114cc90919063ffffffff16565b600481111561071e57fe5b9050919050565b606061078d826107696040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250610b1e565b73ffffffffffffffffffffffffffffffffffffffff1661169e90919063ffffffff16565b9050919050565b610807828260048111156107a457fe5b6107e26040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250610b1e565b73ffffffffffffffffffffffffffffffffffffffff166118bb9092919063ffffffff16565b7f150b944d2f668fb8c44fa57a4dd1c95f72d46a1efea6a92a497a002cf491f47b8282604051808381526020018281526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606061087c8361088e565b915061088783610725565b9050915091565b60006108f6826108d26040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250610b1e565b73ffffffffffffffffffffffffffffffffffffffff16611a6d90919063ffffffff16565b9050919050565b6000606061090a836106ab565b915061091583610725565b9050915091565b61098a85858585856109626040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250610b1e565b73ffffffffffffffffffffffffffffffffffffffff16611c349095949392919063ffffffff16565b7f4877137176325aa35905a2381bdc594ccaf7b63c49d97380c22e2269c6ac96498585858585604051808681526020018581526020018060200184815260200180602001838103835286818151815260200191508051906020019080838360005b83811015610a065780820151818401526020810190506109eb565b50505050905090810190601f168015610a335780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610a6c578082015181840152602081019050610a51565b50505050905090810190601f168015610a995780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a15050505050565b610b1a8282610af56040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250610b1e565b73ffffffffffffffffffffffffffffffffffffffff166124e79092919063ffffffff16565b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610bca578082015181840152602081019050610baf565b50505050905090810190601f168015610bf75780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610c1657600080fd5b505af1158015610c2a573d6000803e3d6000fd5b505050506040513d6020811015610c4057600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1614151515610ce2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f53797374656d2073746174652076696f6c6174696f6e0000000000000000000081525060200191505060405180910390fd5b919050565b600060606000610cf78585612710565b1515610d6b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f53657373696f6e206973206e6f7420657869737473000000000000000000000081525060200191505060405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663e82617fb6040805190810160405280601681526020017f73657373696f6e5f6170706c69636174696f6e5f696400000000000000000000815250866040516020018083805190602001908083835b602083101515610df65780518252602082019150602081019050602083039250610dd1565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515610e665780518252602082019150602081019050602083039250610e41565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015610eed57600080fd5b505af1158015610f01573d6000803e3d6000fd5b505050506040513d6020811015610f1757600080fd5b810190808051906020019092919050505092508473ffffffffffffffffffffffffffffffffffffffff1663a209a29c6040805190810160405280600f81526020017f73657373696f6e5f785f746f6b656e0000000000000000000000000000000000815250866040516020018083805190602001908083835b602083101515610fb55780518252602082019150602081019050602083039250610f90565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156110255780518252602082019150602081019050602083039250611000565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b1580156110ac57600080fd5b505af11580156110c0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156110ea57600080fd5b81019080805164010000000081111561110257600080fd5b8281019050602081018481111561111857600080fd5b815185600182028301116401000000008211171561113557600080fd5b505092919050505091508473ffffffffffffffffffffffffffffffffffffffff1663e82617fb6040805190810160405280600e81526020017f73657373696f6e5f737461747573000000000000000000000000000000000000815250866040516020018083805190602001908083835b6020831015156111ca57805182526020820191506020810190506020830392506111a5565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561123a5780518252602082019150602081019050602083039250611215565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156112c157600080fd5b505af11580156112d5573d6000803e3d6000fd5b505050506040513d60208110156112eb57600080fd5b810190808051906020019092919050505090509250925092565b60008273ffffffffffffffffffffffffffffffffffffffff166317e7dd226040805190810160405280601a81526020017f73657373696f6e5f6861735f6163746976655f636173685f696e000000000000815250846040516020018083805190602001908083835b602083101515611392578051825260208201915060208101905060208303925061136d565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561140257805182526020820191506020810190506020830392506113dd565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561148957600080fd5b505af115801561149d573d6000803e3d6000fd5b505050506040513d60208110156114b357600080fd5b8101908080519060200190929190505050905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e82617fb6040805190810160405280600e81526020017f73657373696f6e5f737461747573000000000000000000000000000000000000815250846040516020018083805190602001908083835b6020831015156115595780518252602082019150602081019050602083039250611534565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156115c957805182526020820191506020810190506020830392506115a4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561165057600080fd5b505af1158015611664573d6000803e3d6000fd5b505050506040513d602081101561167a57600080fd5b8101908080519060200190929190505050600481111561169657fe5b905092915050565b60608273ffffffffffffffffffffffffffffffffffffffff1663a209a29c6040805190810160405280600f81526020017f73657373696f6e5f785f746f6b656e0000000000000000000000000000000000815250846040516020018083805190602001908083835b60208310151561172b5780518252602082019150602081019050602083039250611706565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561179b5780518252602082019150602081019050602083039250611776565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b15801561182257600080fd5b505af1158015611836573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561186057600080fd5b81019080805164010000000081111561187857600080fd5b8281019050602081018481111561188e57600080fd5b81518560018202830111640100000000821117156118ab57600080fd5b5050929190505050905092915050565b8273ffffffffffffffffffffffffffffffffffffffff1663ffb4f6236040805190810160405280600e81526020017f73657373696f6e5f737461747573000000000000000000000000000000000000815250846040516020018083805190602001908083835b6020831015156119465780518252602082019150602081019050602083039250611921565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156119b65780518252602082019150602081019050602083039250611991565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390208360048111156119ef57fe5b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b158015611a5057600080fd5b505af1158015611a64573d6000803e3d6000fd5b50505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e82617fb6040805190810160405280601681526020017f73657373696f6e5f6170706c69636174696f6e5f696400000000000000000000815250846040516020018083805190602001908083835b602083101515611afa5780518252602082019150602081019050602083039250611ad5565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611b6a5780518252602082019150602081019050602083039250611b45565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015611bf157600080fd5b505af1158015611c05573d6000803e3d6000fd5b505050506040513d6020811015611c1b57600080fd5b8101908080519060200190929190505050905092915050565b611c3e8686612710565b151515611cb3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f53657373696f6e20697320616c7265616479206578697374730000000000000081525060200191505060405180910390fd5b611cdc818773ffffffffffffffffffffffffffffffffffffffff166128d790919063ffffffff16565b1515611d50576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4b696f736b206973206e6f74206578697374730000000000000000000000000081525060200191505060405180910390fd5b611d79848773ffffffffffffffffffffffffffffffffffffffff16612aeb90919063ffffffff16565b1515611ded576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4170706c69636174696f6e206973206e6f74206578697374730000000000000081525060200191505060405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663ffb4f6236040805190810160405280601681526020017f73657373696f6e5f6170706c69636174696f6e5f696400000000000000000000815250876040516020018083805190602001908083835b602083101515611e785780518252602082019150602081019050602083039250611e53565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611ee85780518252602082019150602081019050602083039250611ec3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b158015611f7757600080fd5b505af1158015611f8b573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663f58660666040805190810160405280600f81526020017f73657373696f6e5f785f746f6b656e0000000000000000000000000000000000815250876040516020018083805190602001908083835b60208310151561201a5780518252602082019150602081019050602083039250611ff5565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561208a5780518252602082019150602081019050602083039250612065565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612131578082015181840152602081019050612116565b50505050905090810190601f16801561215e5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561217e57600080fd5b505af1158015612192573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663ffb4f6236040805190810160405280600e81526020017f73657373696f6e5f737461747573000000000000000000000000000000000000815250876040516020018083805190602001908083835b60208310151561222157805182526020820191506020810190506020830392506121fc565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515612291578051825260208201915060208101905060208303925061226c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b15801561232057600080fd5b505af1158015612334573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff16633eba9ed26040805190810160405280600e81526020017f73657373696f6e2e657869737473000000000000000000000000000000000000815250876040516020018083805190602001908083835b6020831015156123c3578051825260208201915060208101905060208303925061239e565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515612433578051825260208201915060208101905060208303925061240e565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060016040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018215151515815260200192505050600060405180830381600087803b1580156124c757600080fd5b505af11580156124db573d6000803e3d6000fd5b50505050505050505050565b6124f18383612710565b1515612565576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f53657373696f6e20697320616c7265616479206578697374730000000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16633eba9ed26040805190810160405280601a81526020017f73657373696f6e5f6861735f6163746976655f636173685f696e000000000000815250846040516020018083805190602001908083835b6020831015156125f057805182526020820191506020810190506020830392506125cb565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515612660578051825260208201915060208101905060208303925061263b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018215151515815260200192505050600060405180830381600087803b1580156126f357600080fd5b505af1158015612707573d6000803e3d6000fd5b50505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff166317e7dd226040805190810160405280600e81526020017f73657373696f6e2e657869737473000000000000000000000000000000000000815250846040516020018083805190602001908083835b60208310151561279d5780518252602082019150602081019050602083039250612778565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561280d57805182526020820191506020810190506020830392506127e8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561289457600080fd5b505af11580156128a8573d6000803e3d6000fd5b505050506040513d60208110156128be57600080fd5b8101908080519060200190929190505050905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff166317e7dd226040805190810160405280600c81526020017f6b696f736b2e6578697374730000000000000000000000000000000000000000815250846040516020018083805190602001908083835b602083101515612964578051825260208201915060208101905060208303925061293f565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156129b75780518252602082019150602081019050602083039250612992565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b602083101515612a2157805182526020820191506020810190506020830392506129fc565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015612aa857600080fd5b505af1158015612abc573d6000803e3d6000fd5b505050506040513d6020811015612ad257600080fd5b8101908080519060200190929190505050905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff166317e7dd226040805190810160405280601281526020017f6170706c69636174696f6e2e6578697374730000000000000000000000000000815250846040516020018083805190602001908083835b602083101515612b785780518252602082019150602081019050602083039250612b53565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515612be85780518252602082019150602081019050602083039250612bc3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015612c6f57600080fd5b505af1158015612c83573d6000803e3d6000fd5b505050506040513d6020811015612c9957600080fd5b81019080805190602001909291905050509050929150505600a165627a7a72305820ff7a4bb7d15c9e97bdd3a5945abbcec6a5ac27e24d97a538a656be48cb467db70029";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SAVE = "save";

    public static final String FUNC_GETSESSION = "getSession";

    public static final String FUNC_SETHASACTIVECASHIN = "setHasActiveCashIn";

    public static final String FUNC_ISHASACTIVECASHIN = "isHasActiveCashIn";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_GETSTATUSANDXTOKEN = "getStatusAndXToken";

    public static final String FUNC_GETAPPID = "getAppId";

    public static final String FUNC_GETXTOKEN = "getXToken";

    public static final String FUNC_GETAPPIDANDXTOKEN = "getAppIdAndXToken";

    public static final String FUNC_SETSTATUS = "setStatus";

    public static final Event SAVED_EVENT = new Event("Saved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event STATUSUPDATED_EVENT = new Event("StatusUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ACTIVECASHIN_EVENT = new Event("ActiveCashIn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("77142", "0xebfabda9243dbcf2a85a9b5afc5b98ebbfcd64c2");
    }

    protected SessionStorage(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SessionStorage(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<SessionStorage> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String registryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddress)));
        return deployRemoteCall(SessionStorage.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<SessionStorage> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String registryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddress)));
        return deployRemoteCall(SessionStorage.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<SavedEventResponse> getSavedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SAVED_EVENT, transactionReceipt);
        ArrayList<SavedEventResponse> responses = new ArrayList<SavedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SavedEventResponse typedResponse = new SavedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.appId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.xToken = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.kioskId = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SavedEventResponse> savedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, SavedEventResponse>() {
            @Override
            public SavedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SAVED_EVENT, log);
                SavedEventResponse typedResponse = new SavedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.appId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.xToken = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.kioskId = (String) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<SavedEventResponse> savedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SAVED_EVENT));
        return savedEventObservable(filter);
    }

    public List<StatusUpdatedEventResponse> getStatusUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STATUSUPDATED_EVENT, transactionReceipt);
        ArrayList<StatusUpdatedEventResponse> responses = new ArrayList<StatusUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StatusUpdatedEventResponse typedResponse = new StatusUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StatusUpdatedEventResponse> statusUpdatedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, StatusUpdatedEventResponse>() {
            @Override
            public StatusUpdatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(STATUSUPDATED_EVENT, log);
                StatusUpdatedEventResponse typedResponse = new StatusUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<StatusUpdatedEventResponse> statusUpdatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(STATUSUPDATED_EVENT));
        return statusUpdatedEventObservable(filter);
    }

    public List<ActiveCashInEventResponse> getActiveCashInEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACTIVECASHIN_EVENT, transactionReceipt);
        ArrayList<ActiveCashInEventResponse> responses = new ArrayList<ActiveCashInEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ActiveCashInEventResponse typedResponse = new ActiveCashInEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._sessionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._flag = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ActiveCashInEventResponse> activeCashInEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ActiveCashInEventResponse>() {
            @Override
            public ActiveCashInEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ACTIVECASHIN_EVENT, log);
                ActiveCashInEventResponse typedResponse = new ActiveCashInEventResponse();
                typedResponse.log = log;
                typedResponse._sessionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._flag = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ActiveCashInEventResponse> activeCashInEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACTIVECASHIN_EVENT));
        return activeCashInEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> save(BigInteger sessionId, BigInteger appId, String xToken, BigInteger status, String kioskId) {
        final Function function = new Function(
                FUNC_SAVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(sessionId), 
                new org.web3j.abi.datatypes.generated.Uint256(appId), 
                new org.web3j.abi.datatypes.Utf8String(xToken), 
                new org.web3j.abi.datatypes.generated.Uint256(status), 
                new org.web3j.abi.datatypes.Utf8String(kioskId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<BigInteger, String, BigInteger>> getSession(BigInteger index) {
        final Function function = new Function(FUNC_GETSESSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<BigInteger, String, BigInteger>>(
                new Callable<Tuple3<BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setHasActiveCashIn(BigInteger _sessionId, Boolean _flag) {
        final Function function = new Function(
                FUNC_SETHASACTIVECASHIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_sessionId), 
                new org.web3j.abi.datatypes.Bool(_flag)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isHasActiveCashIn(BigInteger _sessionId) {
        final Function function = new Function(FUNC_ISHASACTIVECASHIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_sessionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> getStatus(BigInteger index) {
        final Function function = new Function(FUNC_GETSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<BigInteger, String>> getStatusAndXToken(BigInteger index) {
        final Function function = new Function(FUNC_GETSTATUSANDXTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<BigInteger, String>>(
                new Callable<Tuple2<BigInteger, String>>() {
                    @Override
                    public Tuple2<BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getAppId(BigInteger index) {
        final Function function = new Function(FUNC_GETAPPID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getXToken(BigInteger index) {
        final Function function = new Function(FUNC_GETXTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<BigInteger, String>> getAppIdAndXToken(BigInteger index) {
        final Function function = new Function(FUNC_GETAPPIDANDXTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<BigInteger, String>>(
                new Callable<Tuple2<BigInteger, String>>() {
                    @Override
                    public Tuple2<BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setStatus(BigInteger index, BigInteger status) {
        final Function function = new Function(
                FUNC_SETSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index), 
                new org.web3j.abi.datatypes.generated.Uint256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static SessionStorage load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SessionStorage(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static SessionStorage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SessionStorage(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public interface SessionStorageEvent extends SmartContractEvent {
    }

    public static class SavedEventResponse implements SessionStorageEvent {
        public Log log;

        public BigInteger sessionId;

        public BigInteger appId;

        public String xToken;

        public BigInteger status;

        public String kioskId;
    }

    public static class StatusUpdatedEventResponse implements SessionStorageEvent {
        public Log log;

        public BigInteger index;

        public BigInteger status;
    }

    public static class ActiveCashInEventResponse implements SessionStorageEvent {
        public Log log;

        public BigInteger _sessionId;

        public Boolean _flag;
    }
}
