package com.skysoft.vaultlogic.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.contracts.SmartContractEvent;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class CashInStorage extends Contract {
    private static final String BINARY = "0x60806040523480156200001157600080fd5b5060405160208062003539833981018060405281019080805190602001909291905050508060006040805190810160405280600f81526020017f636173682d696e2d73746f726167650000000000000000000000000000000000815250336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060019080519060200190620000c6929190620005bf565b50508173ffffffffffffffffffffffffffffffffffffffff1663713b563f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200012d57600080fd5b505af115801562000142573d6000803e3d6000fd5b505050506040513d60208110156200015957600080fd5b8101908080519060200190929190505050600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff1663d0496d6a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200020f57600080fd5b505af115801562000224573d6000803e3d6000fd5b505050506040513d60208110156200023b57600080fd5b8101908080519060200190929190505050600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e60016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620003845780601f10620003585761010080835404028352916020019162000384565b820191906000526020600020905b8154815290600101906020018083116200036657829003601f168201915b505092505050602060405180830381600087803b158015620003a557600080fd5b505af1158015620003ba573d6000803e3d6000fd5b505050506040513d6020811015620003d157600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1614151562000484578073ffffffffffffffffffffffffffffffffffffffff166341c0e1b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156200046a57600080fd5b505af11580156200047f573d6000803e3d6000fd5b505050505b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2c298be60016040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156200057c5780601f1062000550576101008083540402835291602001916200057c565b820191906000526020600020905b8154815290600101906020018083116200055e57829003601f168201915b505092505050600060405180830381600087803b1580156200059d57600080fd5b505af1158015620005b2573d6000803e3d6000fd5b505050505050506200066e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200060257805160ff191683800117855562000633565b8280016001018555821562000633579182015b828111156200063257825182559160200191906001019062000615565b5b50905062000642919062000646565b5090565b6200066b91905b80821115620006675760008160009055506001016200064d565b5090565b90565b612ebb806200067e6000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101175780631e010439146101a75780631f2f4bfd146101e857806333263ad61461025557806333d43dbd1461029657806341c0e1b5146103145780634a4b9feb1461032b5780635c622a0e146103625780636a84f717146103a35780636b2611b81461040e5780636e19cb181461044f57806382e40813146104905780638da5cb5b146104c757806390bf10b01461051e57806390fea94a146105d15780639507d39a14610608578063a9bdb60114610691578063baa135d4146106e8578063c06e88641461075c578063e63f44c814610793575b600080fd5b34801561012357600080fd5b5061012c6107d4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016c578082015181840152602081019050610151565b50505050905090810190601f1680156101995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b357600080fd5b506101d260048036038101908080359060200190929190505050610872565b6040518082815260200191505060405180910390f35b3480156101f457600080fd5b50610213600480360381019080803590602001909291905050506108c6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561026157600080fd5b506102806004803603810190808035906020019092919050505061091a565b6040518082815260200191505060405180910390f35b3480156102a257600080fd5b506102cb600480360381019080803590602001909291908035906020019092919050505061096e565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561032057600080fd5b506103296109c9565b005b34801561033757600080fd5b506103606004803603810190808035906020019092919080359060200190929190505050610a91565b005b34801561036e57600080fd5b5061038d60048036038101908080359060200190929190505050610b21565b6040518082815260200191505060405180910390f35b3480156103af57600080fd5b506103f860048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b75565b6040518082815260200191505060405180910390f35b34801561041a57600080fd5b5061043960048036038101908080359060200190929190505050610c4a565b6040518082815260200191505060405180910390f35b34801561045b57600080fd5b5061047a60048036038101908080359060200190929190505050610c9e565b6040518082815260200191505060405180910390f35b34801561049c57600080fd5b506104c56004803603810190808035906020019092919080359060200190929190505050610cf2565b005b3480156104d357600080fd5b506104dc610d82565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561052a57600080fd5b506105cf600480360381019080803590602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610da7565b005b3480156105dd57600080fd5b506106066004803603810190808035906020019092919080359060200190929190505050610dfb565b005b34801561061457600080fd5b5061063360048036038101908080359060200190929190505050610e4c565b604051808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018281526020019550505050505060405180910390f35b34801561069d57600080fd5b506106e660048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610eb2565b005b3480156106f457600080fd5b5061071360048036038101908080359060200190929190505050610f79565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561076857600080fd5b50610791600480360381019080803590602001909291908035906020019092919050505061101b565b005b34801561079f57600080fd5b506107be6004803603810190808035906020019092919050505061106c565b6040518082815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561086a5780601f1061083f5761010080835404028352916020019161086a565b820191906000526020600020905b81548152906001019060200180831161084d57829003601f168201915b505050505081565b60006108bf82600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110c090919063ffffffff16565b9050919050565b600061091382600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166111ba90919063ffffffff16565b9050919050565b600061096782600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112b490919063ffffffff16565b9050919050565b6000806109be8484600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113ae9092919063ffffffff16565b915091509250929050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141515610a8d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6f6e6c79206f776e657220616c6c6f776564000000000000000000000000000081525060200191505060405180910390fd5b6000ff5b610ade8282600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661159f9092919063ffffffff16565b7f8675c9b21154c77f765df18fbb6c2f5bb9ee8d28c9d5de2f2844919fa56d91648282604051808381526020018281526020019250505060405180910390a15050565b6000610b6e82600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661167990919063ffffffff16565b9050919050565b6000610bc6848484600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611773909392919063ffffffff16565b90507fa50eff91a397e683bdf2380ace809bbdc161da6cdd20f8b88995e4df7c82ffab81858585604051808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060405180910390a19392505050565b6000610c9782600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611cda90919063ffffffff16565b9050919050565b6000610ceb82600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611dd490919063ffffffff16565b9050919050565b610d3f8282600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611ece9092919063ffffffff16565b7f17422b0bc45a88ade572f0c94bf86f21f9a863d8b942193fe5bf3572d715974f8282604051808381526020018281526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610df6838383600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611fa8909392919063ffffffff16565b505050565b610e488282600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166120059092919063ffffffff16565b5050565b6000806000806000610e9f86600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166120df90919063ffffffff16565b9450945094509450945091939590929450565b610f01838383600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166125ab909392919063ffffffff16565b7f20181f140c72f8b11487b346a4401843072d10f05b4a1d3f23e5d0df110676ef838383604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b600080610fc783600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166111ba90919063ffffffff16565b915061101483600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611dd490919063ffffffff16565b9050915091565b6110688282600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166129569092919063ffffffff16565b5050565b60006110b982600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612afd90919063ffffffff16565b9050919050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e82617fb61111d6040805190810160405280600f81526020017f636173682d696e2e62616c616e6365000000000000000000000000000000000081525085612cc4565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561117757600080fd5b505af115801561118b573d6000803e3d6000fd5b505050506040513d60208110156111a157600080fd5b8101908080519060200190929190505050905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff16634c77e5ba6112176040805190810160405280601b81526020017f636173682d696e2e6170706c69636174696f6e2e61646472657373000000000081525085612cc4565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561127157600080fd5b505af1158015611285573d6000803e3d6000fd5b505050506040513d602081101561129b57600080fd5b8101908080519060200190929190505050905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e82617fb6113116040805190810160405280601281526020017f636173685f696e5f73706c69745f73697a65000000000000000000000000000081525085612cc4565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561136b57600080fd5b505af115801561137f573d6000803e3d6000fd5b505050506040513d602081101561139557600080fd5b8101908080519060200190929190505050905092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff16634c77e5ba61140d6040805190810160405280601581526020017f636173685f696e5f73706c69745f7061727469657300000000000000000000008152508787612da5565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561146757600080fd5b505af115801561147b573d6000803e3d6000fd5b505050506040513d602081101561149157600080fd5b810190808051906020019092919050505091508473ffffffffffffffffffffffffffffffffffffffff1663e82617fb6115006040805190810160405280601281526020017f636173685f696e5f73706c69745f6665657300000000000000000000000000008152508787612da5565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561155a57600080fd5b505af115801561156e573d6000803e3d6000fd5b505050506040513d602081101561158457600080fd5b81019080805190602001909291905050509050935093915050565b8273ffffffffffffffffffffffffffffffffffffffff1663ffb4f6236115fa6040805190810160405280600f81526020017f636173682d696e2e62616c616e6365000000000000000000000000000000000081525085612cc4565b836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b15801561165c57600080fd5b505af1158015611670573d6000803e3d6000fd5b50505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e82617fb6116d66040805190810160405280600e81526020017f636173682d696e2e73746174757300000000000000000000000000000000000081525085612cc4565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561173057600080fd5b505af1158015611744573d6000803e3d6000fd5b505050506040513d602081101561175a57600080fd5b8101908080519060200190929190505050905092915050565b60008473ffffffffffffffffffffffffffffffffffffffff1663e82617fb60405160200180806020018281038252600b8152602001807f43617368496e496e6465780000000000000000000000000000000000000000008152506020019150506040516020818303038152906040526040518082805190602001908083835b60208310151561181757805182526020820191506020810190506020830392506117f2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561189e57600080fd5b505af11580156118b2573d6000803e3d6000fd5b505050506040513d60208110156118c857600080fd5b810190808051906020019092919050505090508473ffffffffffffffffffffffffffffffffffffffff1663ffb4f6236119366040805190810160405280601281526020017f636173682d696e2e73657373696f6e2e6964000000000000000000000000000081525084612cc4565b866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b15801561199857600080fd5b505af11580156119ac573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff16635a2bf25a611a0b6040805190810160405280601b81526020017f636173682d696e2e6170706c69636174696f6e2e61646472657373000000000081525084612cc4565b856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015611a9957600080fd5b505af1158015611aad573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663ffb4f623611b0c6040805190810160405280600e81526020017f636173682d696e2e73746174757300000000000000000000000000000000000081525084612cc4565b846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b158015611b6e57600080fd5b505af1158015611b82573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663ffb4f62360405160200180806020018281038252600b8152602001807f43617368496e496e6465780000000000000000000000000000000000000000008152506020019150506040516020818303038152906040526040518082805190602001908083835b602083101515611c285780518252602082019150602081019050602083039250611c03565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600184016040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b158015611cba57600080fd5b505af1158015611cce573d6000803e3d6000fd5b50505050949350505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e82617fb611d376040805190810160405280601b81526020017f636173682d696e2e6170706c69636174696f6e5f62616c616e6365000000000081525085612cc4565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015611d9157600080fd5b505af1158015611da5573d6000803e3d6000fd5b505050506040513d6020811015611dbb57600080fd5b8101908080519060200190929190505050905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e82617fb611e316040805190810160405280601281526020017f636173682d696e2e73657373696f6e2e6964000000000000000000000000000081525085612cc4565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015611e8b57600080fd5b505af1158015611e9f573d6000803e3d6000fd5b505050506040513d6020811015611eb557600080fd5b8101908080519060200190929190505050905092915050565b8273ffffffffffffffffffffffffffffffffffffffff1663ffb4f623611f296040805190810160405280600e81526020017f636173682d696e2e73746174757300000000000000000000000000000000000081525085612cc4565b836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b158015611f8b57600080fd5b505af1158015611f9f573d6000803e3d6000fd5b50505050505050565b60008090505b8251811015611ffe57611ff185858584815181101515611fca57fe5b906020019060200201518585815181101515611fe257fe5b906020019060200201516125ab565b8080600101915050611fae565b5050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663ffb4f6236120606040805190810160405280601b81526020017f636173682d696e2e6170706c69636174696f6e5f62616c616e6365000000000081525085612cc4565b836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b1580156120c257600080fd5b505af11580156120d6573d6000803e3d6000fd5b50505050505050565b60008060008060008673ffffffffffffffffffffffffffffffffffffffff1663e82617fb6121426040805190810160405280601281526020017f636173682d696e2e73657373696f6e2e6964000000000000000000000000000081525089612cc4565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561219c57600080fd5b505af11580156121b0573d6000803e3d6000fd5b505050506040513d60208110156121c657600080fd5b810190808051906020019092919050505094508673ffffffffffffffffffffffffffffffffffffffff16634c77e5ba6122346040805190810160405280601b81526020017f636173682d696e2e6170706c69636174696f6e2e61646472657373000000000081525089612cc4565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561228e57600080fd5b505af11580156122a2573d6000803e3d6000fd5b505050506040513d60208110156122b857600080fd5b810190808051906020019092919050505093508673ffffffffffffffffffffffffffffffffffffffff1663e82617fb6123266040805190810160405280600f81526020017f636173682d696e2e62616c616e6365000000000000000000000000000000000081525089612cc4565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561238057600080fd5b505af1158015612394573d6000803e3d6000fd5b505050506040513d60208110156123aa57600080fd5b810190808051906020019092919050505092508673ffffffffffffffffffffffffffffffffffffffff1663e82617fb6124186040805190810160405280600e81526020017f636173682d696e2e73746174757300000000000000000000000000000000000081525089612cc4565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561247257600080fd5b505af1158015612486573d6000803e3d6000fd5b505050506040513d602081101561249c57600080fd5b810190808051906020019092919050505091508673ffffffffffffffffffffffffffffffffffffffff1663e82617fb61250a6040805190810160405280601281526020017f636173685f696e5f73706c69745f73697a65000000000000000000000000000081525089612cc4565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561256457600080fd5b505af1158015612578573d6000803e3d6000fd5b505050506040513d602081101561258e57600080fd5b810190808051906020019092919050505090509295509295909350565b60008473ffffffffffffffffffffffffffffffffffffffff1663e82617fb6126086040805190810160405280601281526020017f636173685f696e5f73706c69745f73697a65000000000000000000000000000081525087612cc4565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561266257600080fd5b505af1158015612676573d6000803e3d6000fd5b505050506040513d602081101561268c57600080fd5b810190808051906020019092919050505090508473ffffffffffffffffffffffffffffffffffffffff16635a2bf25a6126fb6040805190810160405280601581526020017f636173685f696e5f73706c69745f7061727469657300000000000000000000008152508785612da5565b856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561278957600080fd5b505af115801561279d573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663ffb4f6236127fd6040805190810160405280601281526020017f636173685f696e5f73706c69745f6665657300000000000000000000000000008152508785612da5565b846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b15801561285f57600080fd5b505af1158015612873573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663ffb4f6236128d26040805190810160405280601281526020017f636173685f696e5f73706c69745f73697a65000000000000000000000000000081525087612cc4565b600184016040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b15801561293757600080fd5b505af115801561294b573d6000803e3d6000fd5b505050505050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663ffb4f6236040805190810160405280601f81526020017f636173682d696e2e7661756c745f6c6f6769635f6665655f70657263656e7400815250846040516020018083805190602001908083835b6020831015156129e157805182526020820191506020810190506020830392506129bc565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515612a515780518252602082019150602081019050602083039250612a2c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b158015612ae057600080fd5b505af1158015612af4573d6000803e3d6000fd5b50505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e82617fb6040805190810160405280601f81526020017f636173682d696e2e7661756c745f6c6f6769635f6665655f70657263656e7400815250846040516020018083805190602001908083835b602083101515612b8a5780518252602082019150602081019050602083039250612b65565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515612bfa5780518252602082019150602081019050602083039250612bd5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015612c8157600080fd5b505af1158015612c95573d6000803e3d6000fd5b505050506040513d6020811015612cab57600080fd5b8101908080519060200190929190505050905092915050565b600082826040516020018083805190602001908083835b602083101515612d005780518252602082019150602081019050602083039250612cdb565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515612d705780518252602082019150602081019050602083039250612d4b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905092915050565b60008383836040516020018084805190602001908083835b602083101515612de25780518252602082019150602081019050602083039250612dbd565b6001836020036101000a03801982511681845116808217855250505050505090500183815260200182815260200193505050506040516020818303038152906040526040518082805190602001908083835b602083101515612e595780518252602082019150602081019050602083039250612e34565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905093925050505600a165627a7a723058206922fcb2c75a58642211b550ce7ef6622e6341379339637c32da469b77d1684f0029";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_KILL = "kill";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SAVE = "save";

    public static final String FUNC_GET = "get";

    public static final String FUNC_GETSESSIONID = "getSessionId";

    public static final String FUNC_GETAPPLICATION = "getApplication";

    public static final String FUNC_GETAPPLICATIONANDSESSIONID = "getApplicationAndSessionId";

    public static final String FUNC_SETBALANCE = "setBalance";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_SETVLFEE = "setVLFee";

    public static final String FUNC_GETVLFEE = "getVLFee";

    public static final String FUNC_SETAPPLICATIONBALANCE = "setApplicationBalance";

    public static final String FUNC_GETAPPLICATIONBALANCE = "getApplicationBalance";

    public static final String FUNC_SETSTATUS = "setStatus";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_ADDSPLIT = "addSplit";

    public static final String FUNC_ADDSPLITS = "addSplits";

    public static final String FUNC_GETSPLITSIZE = "getSplitSize";

    public static final String FUNC_GETSPLIT = "getSplit";

    public static final Event CASHINSAVED_EVENT = new Event("CashInSaved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CASHINBALANCEUPDATED_EVENT = new Event("CashInBalanceUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CASHINSTATUSUPDATED_EVENT = new Event("CashInStatusUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CASHINSPLITADDED_EVENT = new Event("CashInSplitAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("77142", "0xc70b1cef831565008930e219dc92f40bb4254a6e");
    }

    protected CashInStorage(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CashInStorage(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> kill() {
        final Function function = new Function(
                FUNC_KILL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<CashInStorage> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _config) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_config)));
        return deployRemoteCall(CashInStorage.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<CashInStorage> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _config) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_config)));
        return deployRemoteCall(CashInStorage.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<CashInSavedEventResponse> getCashInSavedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CASHINSAVED_EVENT, transactionReceipt);
        ArrayList<CashInSavedEventResponse> responses = new ArrayList<CashInSavedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CashInSavedEventResponse typedResponse = new CashInSavedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.channelId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.application = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CashInSavedEventResponse> cashInSavedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, CashInSavedEventResponse>() {
            @Override
            public CashInSavedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CASHINSAVED_EVENT, log);
                CashInSavedEventResponse typedResponse = new CashInSavedEventResponse();
                typedResponse.log = log;
                typedResponse.channelId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.application = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<CashInSavedEventResponse> cashInSavedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CASHINSAVED_EVENT));
        return cashInSavedEventObservable(filter);
    }

    public List<CashInBalanceUpdatedEventResponse> getCashInBalanceUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CASHINBALANCEUPDATED_EVENT, transactionReceipt);
        ArrayList<CashInBalanceUpdatedEventResponse> responses = new ArrayList<CashInBalanceUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CashInBalanceUpdatedEventResponse typedResponse = new CashInBalanceUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.channelId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CashInBalanceUpdatedEventResponse> cashInBalanceUpdatedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, CashInBalanceUpdatedEventResponse>() {
            @Override
            public CashInBalanceUpdatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CASHINBALANCEUPDATED_EVENT, log);
                CashInBalanceUpdatedEventResponse typedResponse = new CashInBalanceUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.channelId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<CashInBalanceUpdatedEventResponse> cashInBalanceUpdatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CASHINBALANCEUPDATED_EVENT));
        return cashInBalanceUpdatedEventObservable(filter);
    }

    public List<CashInStatusUpdatedEventResponse> getCashInStatusUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CASHINSTATUSUPDATED_EVENT, transactionReceipt);
        ArrayList<CashInStatusUpdatedEventResponse> responses = new ArrayList<CashInStatusUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CashInStatusUpdatedEventResponse typedResponse = new CashInStatusUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.channelId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CashInStatusUpdatedEventResponse> cashInStatusUpdatedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, CashInStatusUpdatedEventResponse>() {
            @Override
            public CashInStatusUpdatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CASHINSTATUSUPDATED_EVENT, log);
                CashInStatusUpdatedEventResponse typedResponse = new CashInStatusUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.channelId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<CashInStatusUpdatedEventResponse> cashInStatusUpdatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CASHINSTATUSUPDATED_EVENT));
        return cashInStatusUpdatedEventObservable(filter);
    }

    public List<CashInSplitAddedEventResponse> getCashInSplitAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CASHINSPLITADDED_EVENT, transactionReceipt);
        ArrayList<CashInSplitAddedEventResponse> responses = new ArrayList<CashInSplitAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CashInSplitAddedEventResponse typedResponse = new CashInSplitAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.channelId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.party = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CashInSplitAddedEventResponse> cashInSplitAddedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, CashInSplitAddedEventResponse>() {
            @Override
            public CashInSplitAddedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CASHINSPLITADDED_EVENT, log);
                CashInSplitAddedEventResponse typedResponse = new CashInSplitAddedEventResponse();
                typedResponse.log = log;
                typedResponse.channelId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.party = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<CashInSplitAddedEventResponse> cashInSplitAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CASHINSPLITADDED_EVENT));
        return cashInSplitAddedEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> save(BigInteger sessionId, String application, BigInteger status) {
        final Function function = new Function(
                FUNC_SAVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(sessionId), 
                new org.web3j.abi.datatypes.Address(application), 
                new org.web3j.abi.datatypes.generated.Uint256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple5<BigInteger, String, BigInteger, BigInteger, BigInteger>> get(BigInteger channelId) {
        final Function function = new Function(FUNC_GET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<BigInteger, String, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple5<BigInteger, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, String, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getSessionId(BigInteger channelId) {
        final Function function = new Function(FUNC_GETSESSIONID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getApplication(BigInteger channelId) {
        final Function function = new Function(FUNC_GETAPPLICATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<String, BigInteger>> getApplicationAndSessionId(BigInteger channelId) {
        final Function function = new Function(FUNC_GETAPPLICATIONANDSESSIONID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<String, BigInteger>>(
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setBalance(BigInteger channelId, BigInteger amount) {
        final Function function = new Function(
                FUNC_SETBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getBalance(BigInteger channelId) {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setVLFee(BigInteger channelId, BigInteger fee) {
        final Function function = new Function(
                FUNC_SETVLFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId), 
                new org.web3j.abi.datatypes.generated.Uint256(fee)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getVLFee(BigInteger channelId) {
        final Function function = new Function(FUNC_GETVLFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setApplicationBalance(BigInteger channelId, BigInteger balance) {
        final Function function = new Function(
                FUNC_SETAPPLICATIONBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId), 
                new org.web3j.abi.datatypes.generated.Uint256(balance)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getApplicationBalance(BigInteger channelId) {
        final Function function = new Function(FUNC_GETAPPLICATIONBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setStatus(BigInteger channelId, BigInteger status) {
        final Function function = new Function(
                FUNC_SETSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId), 
                new org.web3j.abi.datatypes.generated.Uint256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getStatus(BigInteger channelId) {
        final Function function = new Function(FUNC_GETSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addSplit(BigInteger channelId, String party, BigInteger amount) {
        final Function function = new Function(
                FUNC_ADDSPLIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId), 
                new org.web3j.abi.datatypes.Address(party), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addSplits(BigInteger channelId, List<String> parties, List<BigInteger> amounts) {
        final Function function = new Function(
                FUNC_ADDSPLITS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.Utils.typeMap(parties, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getSplitSize(BigInteger channelId) {
        final Function function = new Function(FUNC_GETSPLITSIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<String, BigInteger>> getSplit(BigInteger channelId, BigInteger subIndex) {
        final Function function = new Function(FUNC_GETSPLIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId), 
                new org.web3j.abi.datatypes.generated.Uint256(subIndex)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<String, BigInteger>>(
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public static CashInStorage load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CashInStorage(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static CashInStorage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CashInStorage(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public interface CashInStorageEvent extends SmartContractEvent {
    }

    public static class CashInSavedEventResponse implements CashInStorageEvent {
        public Log log;

        public BigInteger channelId;

        public BigInteger sessionId;

        public String application;

        public BigInteger status;
    }

    public static class CashInBalanceUpdatedEventResponse implements CashInStorageEvent {
        public Log log;

        public BigInteger channelId;

        public BigInteger amount;
    }

    public static class CashInStatusUpdatedEventResponse implements CashInStorageEvent {
        public Log log;

        public BigInteger channelId;

        public BigInteger status;
    }

    public static class CashInSplitAddedEventResponse implements CashInStorageEvent {
        public Log log;

        public BigInteger channelId;

        public String party;

        public BigInteger amount;
    }
}
