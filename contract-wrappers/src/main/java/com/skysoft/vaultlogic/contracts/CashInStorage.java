package com.skysoft.vaultlogic.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.contracts.SmartContractEvent;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class CashInStorage extends Contract {
    private static final String BINARY = "0x60806040523480156200001157600080fd5b50604051602080620033428339810180604052810190808051906020019092919050505080336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff161415151562000106576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f53797374656d2073746174652076696f6c6174696f6e0000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e59c5296200019e620002ae640100000000026401000000009004565b306040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156200023e57808201518184015260208101905062000221565b50505050905090810190601f1680156200026c5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156200028d57600080fd5b505af1158015620002a2573d6000803e3d6000fd5b505050505050620002eb565b60606040805190810160405280600f81526020017f636173682d696e2d73746f726167650000000000000000000000000000000000815250905090565b61304780620002fb6000396000f3006080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631e010439146101015780631f2f4bfd1461014257806333263ad6146101af57806333d43dbd146101f05780634a4b9feb1461026e5780635c622a0e146102a55780636a84f717146102e65780636b2611b8146103515780636e19cb181461039257806382e40813146103d35780638da5cb5b1461040a57806390bf10b01461046157806390fea94a146105145780639507d39a1461054b578063a9bdb601146105d4578063baa135d41461062b578063c06e88641461069f578063e63f44c8146106d6575b600080fd5b34801561010d57600080fd5b5061012c60048036038101908080359060200190929190505050610717565b6040518082815260200191505060405180910390f35b34801561014e57600080fd5b5061016d60048036038101908080359060200190929190505050610786565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101bb57600080fd5b506101da600480360381019080803590602001909291905050506107f5565b6040518082815260200191505060405180910390f35b3480156101fc57600080fd5b506102256004803603810190808035906020019092919080359060200190929190505050610864565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561027a57600080fd5b506102a360048036038101908080359060200190929190803590602001909291905050506108da565b005b3480156102b157600080fd5b506102d060048036038101908080359060200190929190505050610985565b6040518082815260200191505060405180910390f35b3480156102f257600080fd5b5061033b60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109f4565b6040518082815260200191505060405180910390f35b34801561035d57600080fd5b5061037c60048036038101908080359060200190929190505050610ae4565b6040518082815260200191505060405180910390f35b34801561039e57600080fd5b506103bd60048036038101908080359060200190929190505050610b53565b6040518082815260200191505060405180910390f35b3480156103df57600080fd5b506104086004803603810190808035906020019092919080359060200190929190505050610bc2565b005b34801561041657600080fd5b5061041f610c6d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561046d57600080fd5b50610512600480360381019080803590602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610c92565b005b34801561052057600080fd5b506105496004803603810190808035906020019092919080359060200190929190505050610d01565b005b34801561055757600080fd5b5061057660048036038101908080359060200190929190505050610d6d565b604051808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018281526020019550505050505060405180910390f35b3480156105e057600080fd5b5061062960048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610dee565b005b34801561063757600080fd5b5061065660048036038101908080359060200190929190505050610ed0565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b3480156106ab57600080fd5b506106d46004803603810190808035906020019092919080359060200190929190505050610fa8565b005b3480156106e257600080fd5b5061070160048036038101908080359060200190929190505050611014565b6040518082815260200191505060405180910390f35b600061077f8261075b6040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff1661124c90919063ffffffff16565b9050919050565b60006107ee826107ca6040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff1661134690919063ffffffff16565b9050919050565b600061085d826108396040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff1661144090919063ffffffff16565b9050919050565b6000806108cf84846108aa6040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff1661153a9092919063ffffffff16565b915091509250929050565b610942828261091d6040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff1661172b9092919063ffffffff16565b7f8675c9b21154c77f765df18fbb6c2f5bb9ee8d28c9d5de2f2844919fa56d91648282604051808381526020018281526020019250505060405180910390a15050565b60006109ed826109c96040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff1661180590919063ffffffff16565b9050919050565b6000610a60848484610a3a6040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff166118ff909392919063ffffffff16565b90507fa50eff91a397e683bdf2380ace809bbdc161da6cdd20f8b88995e4df7c82ffab81858585604051808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060405180910390a19392505050565b6000610b4c82610b286040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff16611e6690919063ffffffff16565b9050919050565b6000610bbb82610b976040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff16611f6090919063ffffffff16565b9050919050565b610c2a8282610c056040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff1661205a9092919063ffffffff16565b7f17422b0bc45a88ade572f0c94bf86f21f9a863d8b942193fe5bf3572d715974f8282604051808381526020018281526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610cfc838383610cd66040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff16612134909392919063ffffffff16565b505050565b610d698282610d446040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff166121919092919063ffffffff16565b5050565b6000806000806000610ddb86610db76040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff1661226b90919063ffffffff16565b9450945094509450945091939590929450565b610e58838383610e326040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff16612737909392919063ffffffff16565b7f20181f140c72f8b11487b346a4401843072d10f05b4a1d3f23e5d0df110676ef838383604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b600080610f3983610f156040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff1661134690919063ffffffff16565b9150610fa183610f7d6040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff16611f6090919063ffffffff16565b9050915091565b6110108282610feb6040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff16612ae29092919063ffffffff16565b5050565b600061107c826110586040805190810160405280600881526020017f6461746162617365000000000000000000000000000000000000000000000000815250611083565b73ffffffffffffffffffffffffffffffffffffffff16612c8990919063ffffffff16565b9050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561112f578082015181840152602081019050611114565b50505050905090810190601f16801561115c5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561117b57600080fd5b505af115801561118f573d6000803e3d6000fd5b505050506040513d60208110156111a557600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1614151515611247576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f53797374656d2073746174652076696f6c6174696f6e0000000000000000000081525060200191505060405180910390fd5b919050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e82617fb6112a96040805190810160405280600f81526020017f636173682d696e2e62616c616e6365000000000000000000000000000000000081525085612e50565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561130357600080fd5b505af1158015611317573d6000803e3d6000fd5b505050506040513d602081101561132d57600080fd5b8101908080519060200190929190505050905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff16634c77e5ba6113a36040805190810160405280601b81526020017f636173682d696e2e6170706c69636174696f6e2e61646472657373000000000081525085612e50565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156113fd57600080fd5b505af1158015611411573d6000803e3d6000fd5b505050506040513d602081101561142757600080fd5b8101908080519060200190929190505050905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e82617fb61149d6040805190810160405280601281526020017f636173685f696e5f73706c69745f73697a65000000000000000000000000000081525085612e50565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156114f757600080fd5b505af115801561150b573d6000803e3d6000fd5b505050506040513d602081101561152157600080fd5b8101908080519060200190929190505050905092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff16634c77e5ba6115996040805190810160405280601581526020017f636173685f696e5f73706c69745f7061727469657300000000000000000000008152508787612f31565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156115f357600080fd5b505af1158015611607573d6000803e3d6000fd5b505050506040513d602081101561161d57600080fd5b810190808051906020019092919050505091508473ffffffffffffffffffffffffffffffffffffffff1663e82617fb61168c6040805190810160405280601281526020017f636173685f696e5f73706c69745f6665657300000000000000000000000000008152508787612f31565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156116e657600080fd5b505af11580156116fa573d6000803e3d6000fd5b505050506040513d602081101561171057600080fd5b81019080805190602001909291905050509050935093915050565b8273ffffffffffffffffffffffffffffffffffffffff1663ffb4f6236117866040805190810160405280600f81526020017f636173682d696e2e62616c616e6365000000000000000000000000000000000081525085612e50565b836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b1580156117e857600080fd5b505af11580156117fc573d6000803e3d6000fd5b50505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e82617fb6118626040805190810160405280600e81526020017f636173682d696e2e73746174757300000000000000000000000000000000000081525085612e50565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156118bc57600080fd5b505af11580156118d0573d6000803e3d6000fd5b505050506040513d60208110156118e657600080fd5b8101908080519060200190929190505050905092915050565b60008473ffffffffffffffffffffffffffffffffffffffff1663e82617fb60405160200180806020018281038252600b8152602001807f43617368496e496e6465780000000000000000000000000000000000000000008152506020019150506040516020818303038152906040526040518082805190602001908083835b6020831015156119a3578051825260208201915060208101905060208303925061197e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015611a2a57600080fd5b505af1158015611a3e573d6000803e3d6000fd5b505050506040513d6020811015611a5457600080fd5b810190808051906020019092919050505090508473ffffffffffffffffffffffffffffffffffffffff1663ffb4f623611ac26040805190810160405280601281526020017f636173682d696e2e73657373696f6e2e6964000000000000000000000000000081525084612e50565b866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b158015611b2457600080fd5b505af1158015611b38573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff16635a2bf25a611b976040805190810160405280601b81526020017f636173682d696e2e6170706c69636174696f6e2e61646472657373000000000081525084612e50565b856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015611c2557600080fd5b505af1158015611c39573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663ffb4f623611c986040805190810160405280600e81526020017f636173682d696e2e73746174757300000000000000000000000000000000000081525084612e50565b846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b158015611cfa57600080fd5b505af1158015611d0e573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663ffb4f62360405160200180806020018281038252600b8152602001807f43617368496e496e6465780000000000000000000000000000000000000000008152506020019150506040516020818303038152906040526040518082805190602001908083835b602083101515611db45780518252602082019150602081019050602083039250611d8f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600184016040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b158015611e4657600080fd5b505af1158015611e5a573d6000803e3d6000fd5b50505050949350505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e82617fb611ec36040805190810160405280601b81526020017f636173682d696e2e6170706c69636174696f6e5f62616c616e6365000000000081525085612e50565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015611f1d57600080fd5b505af1158015611f31573d6000803e3d6000fd5b505050506040513d6020811015611f4757600080fd5b8101908080519060200190929190505050905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e82617fb611fbd6040805190810160405280601281526020017f636173682d696e2e73657373696f6e2e6964000000000000000000000000000081525085612e50565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561201757600080fd5b505af115801561202b573d6000803e3d6000fd5b505050506040513d602081101561204157600080fd5b8101908080519060200190929190505050905092915050565b8273ffffffffffffffffffffffffffffffffffffffff1663ffb4f6236120b56040805190810160405280600e81526020017f636173682d696e2e73746174757300000000000000000000000000000000000081525085612e50565b836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b15801561211757600080fd5b505af115801561212b573d6000803e3d6000fd5b50505050505050565b60008090505b825181101561218a5761217d8585858481518110151561215657fe5b90602001906020020151858581518110151561216e57fe5b90602001906020020151612737565b808060010191505061213a565b5050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663ffb4f6236121ec6040805190810160405280601b81526020017f636173682d696e2e6170706c69636174696f6e5f62616c616e6365000000000081525085612e50565b836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b15801561224e57600080fd5b505af1158015612262573d6000803e3d6000fd5b50505050505050565b60008060008060008673ffffffffffffffffffffffffffffffffffffffff1663e82617fb6122ce6040805190810160405280601281526020017f636173682d696e2e73657373696f6e2e6964000000000000000000000000000081525089612e50565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561232857600080fd5b505af115801561233c573d6000803e3d6000fd5b505050506040513d602081101561235257600080fd5b810190808051906020019092919050505094508673ffffffffffffffffffffffffffffffffffffffff16634c77e5ba6123c06040805190810160405280601b81526020017f636173682d696e2e6170706c69636174696f6e2e61646472657373000000000081525089612e50565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561241a57600080fd5b505af115801561242e573d6000803e3d6000fd5b505050506040513d602081101561244457600080fd5b810190808051906020019092919050505093508673ffffffffffffffffffffffffffffffffffffffff1663e82617fb6124b26040805190810160405280600f81526020017f636173682d696e2e62616c616e6365000000000000000000000000000000000081525089612e50565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561250c57600080fd5b505af1158015612520573d6000803e3d6000fd5b505050506040513d602081101561253657600080fd5b810190808051906020019092919050505092508673ffffffffffffffffffffffffffffffffffffffff1663e82617fb6125a46040805190810160405280600e81526020017f636173682d696e2e73746174757300000000000000000000000000000000000081525089612e50565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156125fe57600080fd5b505af1158015612612573d6000803e3d6000fd5b505050506040513d602081101561262857600080fd5b810190808051906020019092919050505091508673ffffffffffffffffffffffffffffffffffffffff1663e82617fb6126966040805190810160405280601281526020017f636173685f696e5f73706c69745f73697a65000000000000000000000000000081525089612e50565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156126f057600080fd5b505af1158015612704573d6000803e3d6000fd5b505050506040513d602081101561271a57600080fd5b810190808051906020019092919050505090509295509295909350565b60008473ffffffffffffffffffffffffffffffffffffffff1663e82617fb6127946040805190810160405280601281526020017f636173685f696e5f73706c69745f73697a65000000000000000000000000000081525087612e50565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156127ee57600080fd5b505af1158015612802573d6000803e3d6000fd5b505050506040513d602081101561281857600080fd5b810190808051906020019092919050505090508473ffffffffffffffffffffffffffffffffffffffff16635a2bf25a6128876040805190810160405280601581526020017f636173685f696e5f73706c69745f7061727469657300000000000000000000008152508785612f31565b856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561291557600080fd5b505af1158015612929573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663ffb4f6236129896040805190810160405280601281526020017f636173685f696e5f73706c69745f6665657300000000000000000000000000008152508785612f31565b846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b1580156129eb57600080fd5b505af11580156129ff573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663ffb4f623612a5e6040805190810160405280601281526020017f636173685f696e5f73706c69745f73697a65000000000000000000000000000081525087612e50565b600184016040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b158015612ac357600080fd5b505af1158015612ad7573d6000803e3d6000fd5b505050505050505050565b8273ffffffffffffffffffffffffffffffffffffffff1663ffb4f6236040805190810160405280601f81526020017f636173682d696e2e7661756c745f6c6f6769635f6665655f70657263656e7400815250846040516020018083805190602001908083835b602083101515612b6d5780518252602082019150602081019050602083039250612b48565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515612bdd5780518252602082019150602081019050602083039250612bb8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200182815260200192505050600060405180830381600087803b158015612c6c57600080fd5b505af1158015612c80573d6000803e3d6000fd5b50505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663e82617fb6040805190810160405280601f81526020017f636173682d696e2e7661756c745f6c6f6769635f6665655f70657263656e7400815250846040516020018083805190602001908083835b602083101515612d165780518252602082019150602081019050602083039250612cf1565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515612d865780518252602082019150602081019050602083039250612d61565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015612e0d57600080fd5b505af1158015612e21573d6000803e3d6000fd5b505050506040513d6020811015612e3757600080fd5b8101908080519060200190929190505050905092915050565b600082826040516020018083805190602001908083835b602083101515612e8c5780518252602082019150602081019050602083039250612e67565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515612efc5780518252602082019150602081019050602083039250612ed7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905092915050565b60008383836040516020018084805190602001908083835b602083101515612f6e5780518252602082019150602081019050602083039250612f49565b6001836020036101000a03801982511681845116808217855250505050505090500183815260200182815260200193505050506040516020818303038152906040526040518082805190602001908083835b602083101515612fe55780518252602082019150602081019050602083039250612fc0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905093925050505600a165627a7a72305820680f9485b8a3d53fd5f0495bf7d58e08beb610a192ca79600f8f3fa0e6530af30029";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SAVE = "save";

    public static final String FUNC_GET = "get";

    public static final String FUNC_GETSESSIONID = "getSessionId";

    public static final String FUNC_GETAPPLICATION = "getApplication";

    public static final String FUNC_GETAPPLICATIONANDSESSIONID = "getApplicationAndSessionId";

    public static final String FUNC_SETBALANCE = "setBalance";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_SETVLFEE = "setVLFee";

    public static final String FUNC_GETVLFEE = "getVLFee";

    public static final String FUNC_SETAPPLICATIONBALANCE = "setApplicationBalance";

    public static final String FUNC_GETAPPLICATIONBALANCE = "getApplicationBalance";

    public static final String FUNC_SETSTATUS = "setStatus";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_ADDSPLIT = "addSplit";

    public static final String FUNC_ADDSPLITS = "addSplits";

    public static final String FUNC_GETSPLITSIZE = "getSplitSize";

    public static final String FUNC_GETSPLIT = "getSplit";

    public static final Event CASHINSAVED_EVENT = new Event("CashInSaved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CASHINBALANCEUPDATED_EVENT = new Event("CashInBalanceUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CASHINSTATUSUPDATED_EVENT = new Event("CashInStatusUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CASHINSPLITADDED_EVENT = new Event("CashInSplitAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("5777", "0xa9cbcc2c563cc91b53a6345084478debac411226");
    }

    protected CashInStorage(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CashInStorage(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<CashInStorage> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String registryAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddr)));
        return deployRemoteCall(CashInStorage.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<CashInStorage> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String registryAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddr)));
        return deployRemoteCall(CashInStorage.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<CashInSavedEventResponse> getCashInSavedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CASHINSAVED_EVENT, transactionReceipt);
        ArrayList<CashInSavedEventResponse> responses = new ArrayList<CashInSavedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CashInSavedEventResponse typedResponse = new CashInSavedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.channelId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.application = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CashInSavedEventResponse> cashInSavedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, CashInSavedEventResponse>() {
            @Override
            public CashInSavedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CASHINSAVED_EVENT, log);
                CashInSavedEventResponse typedResponse = new CashInSavedEventResponse();
                typedResponse.log = log;
                typedResponse.channelId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.application = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<CashInSavedEventResponse> cashInSavedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CASHINSAVED_EVENT));
        return cashInSavedEventObservable(filter);
    }

    public List<CashInBalanceUpdatedEventResponse> getCashInBalanceUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CASHINBALANCEUPDATED_EVENT, transactionReceipt);
        ArrayList<CashInBalanceUpdatedEventResponse> responses = new ArrayList<CashInBalanceUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CashInBalanceUpdatedEventResponse typedResponse = new CashInBalanceUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.channelId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CashInBalanceUpdatedEventResponse> cashInBalanceUpdatedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, CashInBalanceUpdatedEventResponse>() {
            @Override
            public CashInBalanceUpdatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CASHINBALANCEUPDATED_EVENT, log);
                CashInBalanceUpdatedEventResponse typedResponse = new CashInBalanceUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.channelId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<CashInBalanceUpdatedEventResponse> cashInBalanceUpdatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CASHINBALANCEUPDATED_EVENT));
        return cashInBalanceUpdatedEventObservable(filter);
    }

    public List<CashInStatusUpdatedEventResponse> getCashInStatusUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CASHINSTATUSUPDATED_EVENT, transactionReceipt);
        ArrayList<CashInStatusUpdatedEventResponse> responses = new ArrayList<CashInStatusUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CashInStatusUpdatedEventResponse typedResponse = new CashInStatusUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.channelId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CashInStatusUpdatedEventResponse> cashInStatusUpdatedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, CashInStatusUpdatedEventResponse>() {
            @Override
            public CashInStatusUpdatedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CASHINSTATUSUPDATED_EVENT, log);
                CashInStatusUpdatedEventResponse typedResponse = new CashInStatusUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.channelId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<CashInStatusUpdatedEventResponse> cashInStatusUpdatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CASHINSTATUSUPDATED_EVENT));
        return cashInStatusUpdatedEventObservable(filter);
    }

    public List<CashInSplitAddedEventResponse> getCashInSplitAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CASHINSPLITADDED_EVENT, transactionReceipt);
        ArrayList<CashInSplitAddedEventResponse> responses = new ArrayList<CashInSplitAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CashInSplitAddedEventResponse typedResponse = new CashInSplitAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.channelId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.party = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CashInSplitAddedEventResponse> cashInSplitAddedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, CashInSplitAddedEventResponse>() {
            @Override
            public CashInSplitAddedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CASHINSPLITADDED_EVENT, log);
                CashInSplitAddedEventResponse typedResponse = new CashInSplitAddedEventResponse();
                typedResponse.log = log;
                typedResponse.channelId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.party = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<CashInSplitAddedEventResponse> cashInSplitAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CASHINSPLITADDED_EVENT));
        return cashInSplitAddedEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> save(BigInteger sessionId, String application, BigInteger status) {
        final Function function = new Function(
                FUNC_SAVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(sessionId), 
                new org.web3j.abi.datatypes.Address(application), 
                new org.web3j.abi.datatypes.generated.Uint256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple5<BigInteger, String, BigInteger, BigInteger, BigInteger>> get(BigInteger channelId) {
        final Function function = new Function(FUNC_GET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<BigInteger, String, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple5<BigInteger, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, String, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getSessionId(BigInteger channelId) {
        final Function function = new Function(FUNC_GETSESSIONID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getApplication(BigInteger channelId) {
        final Function function = new Function(FUNC_GETAPPLICATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple2<String, BigInteger>> getApplicationAndSessionId(BigInteger channelId) {
        final Function function = new Function(FUNC_GETAPPLICATIONANDSESSIONID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<String, BigInteger>>(
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setBalance(BigInteger channelId, BigInteger amount) {
        final Function function = new Function(
                FUNC_SETBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getBalance(BigInteger channelId) {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setVLFee(BigInteger channelId, BigInteger fee) {
        final Function function = new Function(
                FUNC_SETVLFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId), 
                new org.web3j.abi.datatypes.generated.Uint256(fee)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getVLFee(BigInteger channelId) {
        final Function function = new Function(FUNC_GETVLFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setApplicationBalance(BigInteger channelId, BigInteger balance) {
        final Function function = new Function(
                FUNC_SETAPPLICATIONBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId), 
                new org.web3j.abi.datatypes.generated.Uint256(balance)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getApplicationBalance(BigInteger channelId) {
        final Function function = new Function(FUNC_GETAPPLICATIONBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setStatus(BigInteger channelId, BigInteger status) {
        final Function function = new Function(
                FUNC_SETSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId), 
                new org.web3j.abi.datatypes.generated.Uint256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getStatus(BigInteger channelId) {
        final Function function = new Function(FUNC_GETSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addSplit(BigInteger channelId, String party, BigInteger amount) {
        final Function function = new Function(
                FUNC_ADDSPLIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId), 
                new org.web3j.abi.datatypes.Address(party), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addSplits(BigInteger channelId, List<String> parties, List<BigInteger> amounts) {
        final Function function = new Function(
                FUNC_ADDSPLITS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.Utils.typeMap(parties, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getSplitSize(BigInteger channelId) {
        final Function function = new Function(FUNC_GETSPLITSIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<String, BigInteger>> getSplit(BigInteger channelId, BigInteger subIndex) {
        final Function function = new Function(FUNC_GETSPLIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(channelId), 
                new org.web3j.abi.datatypes.generated.Uint256(subIndex)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<String, BigInteger>>(
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public static CashInStorage load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CashInStorage(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static CashInStorage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CashInStorage(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public interface CashInStorageEvent extends SmartContractEvent {
    }

    public static class CashInSavedEventResponse implements CashInStorageEvent {
        public Log log;

        public BigInteger channelId;

        public BigInteger sessionId;

        public String application;

        public BigInteger status;
    }

    public static class CashInBalanceUpdatedEventResponse implements CashInStorageEvent {
        public Log log;

        public BigInteger channelId;

        public BigInteger amount;
    }

    public static class CashInStatusUpdatedEventResponse implements CashInStorageEvent {
        public Log log;

        public BigInteger channelId;

        public BigInteger status;
    }

    public static class CashInSplitAddedEventResponse implements CashInStorageEvent {
        public Log log;

        public BigInteger channelId;

        public String party;

        public BigInteger amount;
    }
}
