package com.skysoft.vaultlogic.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.contracts.SmartContractEvent;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class CameraOracle extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_KILL = "kill";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ONNEXTSTARTQRSCAN = "onNextStartQRScan";

    public static final String FUNC_SUCCESSSTART = "successStart";

    public static final String FUNC_FAILSTART = "failStart";

    public static final String FUNC_SCANNED = "scanned";

    public static final String FUNC_ONNEXTSTOPQRSCAN = "onNextStopQRScan";

    public static final String FUNC_SUCCESSSTOP = "successStop";

    public static final String FUNC_FAILSTOP = "failStop";

    public static final Event STARTSCANQR_EVENT = new Event("StartScanQR", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event STOPSCANQR_EVENT = new Event("StopScanQR", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("84107", "0x5b77753d9f712182060cb4a7d5a312ae67d4ec4e");
        _addresses.put("37609", "0xde5fa62fac696ff1f61abfe3e74d268c3eb16a45");
        _addresses.put("5777", "0xacebf0e7fa9fe68b5674e60c74515673ce3c339b");
    }

    protected CameraOracle(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CameraOracle(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> kill() {
        final Function function = new Function(
                FUNC_KILL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<CameraOracle> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _config) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_config)));
        return deployRemoteCall(CameraOracle.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<CameraOracle> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _config) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_config)));
        return deployRemoteCall(CameraOracle.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<StartScanQREventResponse> getStartScanQREvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STARTSCANQR_EVENT, transactionReceipt);
        ArrayList<StartScanQREventResponse> responses = new ArrayList<StartScanQREventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StartScanQREventResponse typedResponse = new StartScanQREventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._commandId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._sessionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._lights = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StartScanQREventResponse> startScanQREventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, StartScanQREventResponse>() {
            @Override
            public StartScanQREventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(STARTSCANQR_EVENT, log);
                StartScanQREventResponse typedResponse = new StartScanQREventResponse();
                typedResponse.log = log;
                typedResponse._commandId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._sessionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._lights = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<StartScanQREventResponse> startScanQREventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(STARTSCANQR_EVENT));
        return startScanQREventObservable(filter);
    }

    public List<StopScanQREventResponse> getStopScanQREvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STOPSCANQR_EVENT, transactionReceipt);
        ArrayList<StopScanQREventResponse> responses = new ArrayList<StopScanQREventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StopScanQREventResponse typedResponse = new StopScanQREventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._commandId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._sessionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StopScanQREventResponse> stopScanQREventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, StopScanQREventResponse>() {
            @Override
            public StopScanQREventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(STOPSCANQR_EVENT, log);
                StopScanQREventResponse typedResponse = new StopScanQREventResponse();
                typedResponse.log = log;
                typedResponse._commandId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._sessionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<StopScanQREventResponse> stopScanQREventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(STOPSCANQR_EVENT));
        return stopScanQREventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> onNextStartQRScan(BigInteger _commandId) {
        final Function function = new Function(
                FUNC_ONNEXTSTARTQRSCAN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_commandId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> successStart(BigInteger _commandId, String _port, String _url, String _href) {
        final Function function = new Function(
                FUNC_SUCCESSSTART, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_commandId), 
                new org.web3j.abi.datatypes.Utf8String(_port), 
                new org.web3j.abi.datatypes.Utf8String(_url), 
                new org.web3j.abi.datatypes.Utf8String(_href)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> failStart(BigInteger _commandId) {
        final Function function = new Function(
                FUNC_FAILSTART, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_commandId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> scanned(BigInteger _sessionId, String _qr) {
        final Function function = new Function(
                FUNC_SCANNED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_sessionId), 
                new org.web3j.abi.datatypes.Utf8String(_qr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> onNextStopQRScan(BigInteger _commandId) {
        final Function function = new Function(
                FUNC_ONNEXTSTOPQRSCAN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_commandId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> successStop(BigInteger _commandId) {
        final Function function = new Function(
                FUNC_SUCCESSSTOP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_commandId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> failStop(BigInteger _commandId) {
        final Function function = new Function(
                FUNC_FAILSTOP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_commandId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static CameraOracle load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CameraOracle(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static CameraOracle load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CameraOracle(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public interface CameraOracleEvent extends SmartContractEvent {
    }

    public static class StartScanQREventResponse implements CameraOracleEvent {
        public Log log;

        public BigInteger _commandId;

        public BigInteger _sessionId;

        public Boolean _lights;
    }

    public static class StopScanQREventResponse implements CameraOracleEvent {
        public Log log;

        public BigInteger _commandId;

        public BigInteger _sessionId;
    }
}
