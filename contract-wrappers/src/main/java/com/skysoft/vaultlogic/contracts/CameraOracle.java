package com.skysoft.vaultlogic.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.contracts.SmartContractEvent;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class CameraOracle extends Contract {
    private static final String BINARY = "0x60806040523480156200001157600080fd5b5060405160208062002003833981018060405281019080805190602001909291905050508060006040805190810160405280600d81526020017f63616d6572612d6f7261636c6500000000000000000000000000000000000000815250336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060019080519060200190620000c6929190620005bf565b50508173ffffffffffffffffffffffffffffffffffffffff1663713b563f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200012d57600080fd5b505af115801562000142573d6000803e3d6000fd5b505050506040513d60208110156200015957600080fd5b8101908080519060200190929190505050600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff1663d0496d6a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200020f57600080fd5b505af115801562000224573d6000803e3d6000fd5b505050506040513d60208110156200023b57600080fd5b8101908080519060200190929190505050600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e60016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620003845780601f10620003585761010080835404028352916020019162000384565b820191906000526020600020905b8154815290600101906020018083116200036657829003601f168201915b505092505050602060405180830381600087803b158015620003a557600080fd5b505af1158015620003ba573d6000803e3d6000fd5b505050506040513d6020811015620003d157600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1614151562000484578073ffffffffffffffffffffffffffffffffffffffff166341c0e1b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156200046a57600080fd5b505af11580156200047f573d6000803e3d6000fd5b505050505b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2c298be60016040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156200057c5780601f1062000550576101008083540402835291602001916200057c565b820191906000526020600020905b8154815290600101906020018083116200055e57829003601f168201915b505092505050600060405180830381600087803b1580156200059d57600080fd5b505af1158015620005b2573d6000803e3d6000fd5b505050505050506200066e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200060257805160ff191683800117855562000633565b8280016001018555821562000633579182015b828111156200063257825182559160200191906001019062000615565b5b50905062000642919062000646565b5090565b6200066b91905b80821115620006675760008160009055506001016200064d565b5090565b90565b611985806200067e6000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461009e5780630f9cac121461012e5780631986721a1461022d57806341c0e1b51461025a57806369bb807b146102715780638da5cb5b146102b6578063b9641d831461030d578063edbf50601461033a578063f2d9a2b114610367575b600080fd5b3480156100aa57600080fd5b506100b36103ac565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f35780820151818401526020810190506100d8565b50505050905090810190601f1680156101205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013a57600080fd5b5061022b60048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061044a565b005b34801561023957600080fd5b5061025860048036038101908080359060200190929190505050610783565b005b34801561026657600080fd5b5061026f610972565b005b34801561027d57600080fd5b5061029c60048036038101908080359060200190929190505050610a3a565b604051808215151515815260200191505060405180910390f35b3480156102c257600080fd5b506102cb610ad3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031957600080fd5b5061033860048036038101908080359060200190929190505050610af8565b005b34801561034657600080fd5b5061036560048036038101908080359060200190929190505050610ce7565b005b34801561037357600080fd5b5061039260048036038101908080359060200190929190505050610ed6565b604051808215151515815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104425780601f1061041757610100808354040283529160200191610442565b820191906000526020600020905b81548152906001019060200180831161042557829003601f168201915b505050505081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040805190810160405280600e81526020017f63616d6572612d6d616e616765720000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561052957808201518184015260208101905061050e565b50505050905090810190601f1680156105565780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561057557600080fd5b505af1158015610589573d6000803e3d6000fd5b505050506040513d602081101561059f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663d511529f858585856040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561064857808201518184015260208101905061062d565b50505050905090810190601f1680156106755780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156106ae578082015181840152602081019050610693565b50505050905090810190601f1680156106db5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156107145780820151818401526020810190506106f9565b50505050905090810190601f1680156107415780820380516001836020036101000a031916815260200191505b50975050505050505050600060405180830381600087803b15801561076557600080fd5b505af1158015610779573d6000803e3d6000fd5b5050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040805190810160405280600e81526020017f63616d6572612d6d616e616765720000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610862578082015181840152602081019050610847565b50505050905090810190601f16801561088f5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156108ae57600080fd5b505af11580156108c2573d6000803e3d6000fd5b505050506040513d60208110156108d857600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16630c965f0b826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561095757600080fd5b505af115801561096b573d6000803e3d6000fd5b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141515610a36576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6f6e6c79206f776e657220616c6c6f776564000000000000000000000000000081525060200191505060405180910390fd5b6000ff5b600080610a8883600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610f8090919063ffffffff16565b90507f16de1666eb16a2670c9d390205bb86bc674940dc7eb116416cdbcdeaeedf6bd68382604051808381526020018281526020019250505060405180910390a16001915050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040805190810160405280600e81526020017f63616d6572612d6d616e616765720000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610bd7578082015181840152602081019050610bbc565b50505050905090810190601f168015610c045780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610c2357600080fd5b505af1158015610c37573d6000803e3d6000fd5b505050506040513d6020811015610c4d57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16636d0fd4e2826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015610ccc57600080fd5b505af1158015610ce0573d6000803e3d6000fd5b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e6040805190810160405280600e81526020017f63616d6572612d6d616e616765720000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610dc6578082015181840152602081019050610dab565b50505050905090810190601f168015610df35780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610e1257600080fd5b505af1158015610e26573d6000803e3d6000fd5b505050506040513d6020811015610e3c57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166326811a0e826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015610ebb57600080fd5b505af1158015610ecf573d6000803e3d6000fd5b5050505050565b6000806000610f2684600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166111c590919063ffffffff16565b915091507f91b0050209d6ad8c284e25db5226a5a47b480d0d53da14b53e1c84439d5a44a28483836040518084815260200183815260200182151515158152602001935050505060405180910390a1600192505050919050565b6000610f8c83836115cb565b1515611000576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f53746f70205152207363616e206973206e6f742065786973747300000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663e82617fb6040805190810160405280601781526020017f73746f702d71722d7363616e2e73657373696f6e2e6964000000000000000000815250846040516020018083805190602001908083835b60208310151561108b5780518252602082019150602081019050602083039250611066565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156110fb57805182526020820191506020810190506020830392506110d6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561118257600080fd5b505af1158015611196573d6000803e3d6000fd5b505050506040513d60208110156111ac57600080fd5b8101908080519060200190929190505050905092915050565b6000806111d28484611792565b1515611246576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5374617274205152207363616e206973206e6f7420657869737473000000000081525060200191505060405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663e82617fb6040805190810160405280601281526020017f7363616e2d71722e73657373696f6e2e69640000000000000000000000000000815250856040516020018083805190602001908083835b6020831015156112d157805182526020820191506020810190506020830392506112ac565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611341578051825260208201915060208101905060208303925061131c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b1580156113c857600080fd5b505af11580156113dc573d6000803e3d6000fd5b505050506040513d60208110156113f257600080fd5b810190808051906020019092919050505091508373ffffffffffffffffffffffffffffffffffffffff166317e7dd226040805190810160405280600e81526020017f7363616e2d71722e6c6967687473000000000000000000000000000000000000815250856040516020018083805190602001908083835b602083101515611490578051825260208201915060208101905060208303925061146b565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561150057805182526020820191506020810190506020830392506114db565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561158757600080fd5b505af115801561159b573d6000803e3d6000fd5b505050506040513d60208110156115b157600080fd5b810190808051906020019092919050505090509250929050565b60008273ffffffffffffffffffffffffffffffffffffffff166317e7dd226040805190810160405280601381526020017f73746f702d71722d7363616e2e65786973747300000000000000000000000000815250846040516020018083805190602001908083835b6020831015156116585780518252602082019150602081019050602083039250611633565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156116c857805182526020820191506020810190506020830392506116a3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561174f57600080fd5b505af1158015611763573d6000803e3d6000fd5b505050506040513d602081101561177957600080fd5b8101908080519060200190929190505050905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff166317e7dd226040805190810160405280600e81526020017f7363616e2d71722e657869737473000000000000000000000000000000000000815250846040516020018083805190602001908083835b60208310151561181f57805182526020820191506020810190506020830392506117fa565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561188f578051825260208201915060208101905060208303925061186a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561191657600080fd5b505af115801561192a573d6000803e3d6000fd5b505050506040513d602081101561194057600080fd5b81019080805190602001909291905050509050929150505600a165627a7a7230582053bd72f6ef3a3e714f15973d9ef72930f4cc809eff25e97b3a69baaf015cd32e0029";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_KILL = "kill";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ONNEXTSTARTQRSCAN = "onNextStartQRScan";

    public static final String FUNC_SUCCESSSTART = "successStart";

    public static final String FUNC_FAILSTART = "failStart";

    public static final String FUNC_ONNEXTSTOPQRSCAN = "onNextStopQRScan";

    public static final String FUNC_SUCCESSSTOP = "successStop";

    public static final String FUNC_FAILSTOP = "failStop";

    public static final Event STARTSCANQR_EVENT = new Event("StartScanQR", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event STOPSCANQR_EVENT = new Event("StopScanQR", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    protected CameraOracle(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CameraOracle(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> kill() {
        final Function function = new Function(
                FUNC_KILL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<CameraOracle> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _config) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_config)));
        return deployRemoteCall(CameraOracle.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<CameraOracle> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _config) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_config)));
        return deployRemoteCall(CameraOracle.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<StartScanQREventResponse> getStartScanQREvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STARTSCANQR_EVENT, transactionReceipt);
        ArrayList<StartScanQREventResponse> responses = new ArrayList<StartScanQREventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StartScanQREventResponse typedResponse = new StartScanQREventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._commandId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._sessionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._lights = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StartScanQREventResponse> startScanQREventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, StartScanQREventResponse>() {
            @Override
            public StartScanQREventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(STARTSCANQR_EVENT, log);
                StartScanQREventResponse typedResponse = new StartScanQREventResponse();
                typedResponse.log = log;
                typedResponse._commandId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._sessionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._lights = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<StartScanQREventResponse> startScanQREventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(STARTSCANQR_EVENT));
        return startScanQREventObservable(filter);
    }

    public List<StopScanQREventResponse> getStopScanQREvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STOPSCANQR_EVENT, transactionReceipt);
        ArrayList<StopScanQREventResponse> responses = new ArrayList<StopScanQREventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StopScanQREventResponse typedResponse = new StopScanQREventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._commandId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._sessionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StopScanQREventResponse> stopScanQREventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, StopScanQREventResponse>() {
            @Override
            public StopScanQREventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(STOPSCANQR_EVENT, log);
                StopScanQREventResponse typedResponse = new StopScanQREventResponse();
                typedResponse.log = log;
                typedResponse._commandId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._sessionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<StopScanQREventResponse> stopScanQREventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(STOPSCANQR_EVENT));
        return stopScanQREventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> onNextStartQRScan(BigInteger _commandId) {
        final Function function = new Function(
                FUNC_ONNEXTSTARTQRSCAN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_commandId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> successStart(BigInteger _sessionId, String _port, String _url, String _href) {
        final Function function = new Function(
                FUNC_SUCCESSSTART, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_sessionId), 
                new org.web3j.abi.datatypes.Utf8String(_port), 
                new org.web3j.abi.datatypes.Utf8String(_url), 
                new org.web3j.abi.datatypes.Utf8String(_href)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> failStart(BigInteger _commandId) {
        final Function function = new Function(
                FUNC_FAILSTART, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_commandId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> onNextStopQRScan(BigInteger _commandId) {
        final Function function = new Function(
                FUNC_ONNEXTSTOPQRSCAN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_commandId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> successStop(BigInteger _commandId) {
        final Function function = new Function(
                FUNC_SUCCESSSTOP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_commandId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> failStop(BigInteger _commandId) {
        final Function function = new Function(
                FUNC_FAILSTOP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_commandId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static CameraOracle load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CameraOracle(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static CameraOracle load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CameraOracle(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public interface CameraOracleEvent extends SmartContractEvent {
    }

    public static class StartScanQREventResponse implements CameraOracleEvent {
        public Log log;

        public BigInteger _commandId;

        public BigInteger _sessionId;

        public Boolean _lights;
    }

    public static class StopScanQREventResponse implements CameraOracleEvent {
        public Log log;

        public BigInteger _commandId;

        public BigInteger _sessionId;
    }
}
