package com.skysoft.vaultlogic.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.contracts.SmartContractEvent;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class KioskStorage extends Contract {
    private static final String BINARY = "0x60806040523480156200001157600080fd5b5060405160208062002618833981018060405281019080805190602001909291905050508060006040805190810160405280600d81526020017f6b696f736b2d73746f7261676500000000000000000000000000000000000000815250336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060019080519060200190620000c6929190620005bf565b50508173ffffffffffffffffffffffffffffffffffffffff1663713b563f6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200012d57600080fd5b505af115801562000142573d6000803e3d6000fd5b505050506040513d60208110156200015957600080fd5b8101908080519060200190929190505050600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff1663d0496d6a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156200020f57600080fd5b505af115801562000224573d6000803e3d6000fd5b505050506040513d60208110156200023b57600080fd5b8101908080519060200190929190505050600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e60016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620003845780601f10620003585761010080835404028352916020019162000384565b820191906000526020600020905b8154815290600101906020018083116200036657829003601f168201915b505092505050602060405180830381600087803b158015620003a557600080fd5b505af1158015620003ba573d6000803e3d6000fd5b505050506040513d6020811015620003d157600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1614151562000484578073ffffffffffffffffffffffffffffffffffffffff166341c0e1b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156200046a57600080fd5b505af11580156200047f573d6000803e3d6000fd5b505050505b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2c298be60016040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156200057c5780601f1062000550576101008083540402835291602001916200057c565b820191906000526020600020905b8154815290600101906020018083116200055e57829003601f168201915b505092505050600060405180830381600087803b1580156200059d57600080fd5b505af1158015620005b2573d6000803e3d6000fd5b505050505050506200066e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200060257805160ff191683800117855562000633565b8280016001018555821562000633579182015b828111156200063257825182559160200191906001019062000615565b5b50905062000642919062000646565b5090565b6200066b91905b80821115620006675760008160009055506001016200064d565b5090565b90565b611f9a806200067e6000396000f30060806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610072578063314fd4dc1461010257806341c0e1b51461023d578063693ec85e146102545780638da5cb5b1461040e575b600080fd5b34801561007e57600080fd5b50610087610465565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100c75780820151818401526020810190506100ac565b50505050905090810190601f1680156100f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561010e57600080fd5b5061023b600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610503565b005b34801561024957600080fd5b5061025261073e565b005b34801561026057600080fd5b506102bb600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610806565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156103035780820151818401526020810190506102e8565b50505050905090810190601f1680156103305780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b8381101561036957808201518184015260208101905061034e565b50505050905090810190601f1680156103965780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156103cf5780820151818401526020810190506103b4565b50505050905090810190601f1680156103fc5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561041a57600080fd5b50610423610863565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104fb5780601f106104d0576101008083540402835291602001916104fb565b820191906000526020600020905b8154815290600101906020018083116104de57829003601f168201915b505050505081565b61055484848484600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661088890949392919063ffffffff16565b507f9a70d206ebfed2a7f1731124889425f55cd2eafea00afdf1805f8183bbdd0a28848484846040518080602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b838110156105c65780820151818401526020810190506105ab565b50505050905090810190601f1680156105f35780820380516001836020036101000a031916815260200191505b50858103845288818151815260200191508051906020019080838360005b8381101561062c578082015181840152602081019050610611565b50505050905090810190601f1680156106595780820380516001836020036101000a031916815260200191505b50858103835287818151815260200191508051906020019080838360005b83811015610692578082015181840152602081019050610677565b50505050905090810190601f1680156106bf5780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b838110156106f85780820151818401526020810190506106dd565b50505050905090810190601f1680156107255780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a150505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141515610802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6f6e6c79206f776e657220616c6c6f776564000000000000000000000000000081525060200191505060405180910390fd5b6000ff5b606080606061085684600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661151a90919063ffffffff16565b9250925092509193909250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006108948686611d5a565b151515610909576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4b696f736b20616c72656164792065786973747300000000000000000000000081525060200191505060405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663f58660666040805190810160405280600e81526020017f6b696f736b5f73686f72745f696400000000000000000000000000000000000081525087604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b838110156109a3578082015181840152602081019050610988565b50505050905090810190601f1680156109d05780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610a095780820151818401526020810190506109ee565b50505050905090810190601f168015610a365780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b602083101515610a815780518252602082019150602081019050602083039250610a5c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020876040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b28578082015181840152602081019050610b0d565b50505050905090810190601f168015610b555780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610b7557600080fd5b505af1158015610b89573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663f58660666040805190810160405280601681526020017f6b696f736b5f6c6f636174696f6e5f616464726573730000000000000000000081525087604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610c27578082015181840152602081019050610c0c565b50505050905090810190601f168015610c545780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610c8d578082015181840152602081019050610c72565b50505050905090810190601f168015610cba5780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b602083101515610d055780518252602082019150602081019050602083039250610ce0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610dac578082015181840152602081019050610d91565b50505050905090810190601f168015610dd95780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610df957600080fd5b505af1158015610e0d573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663f58660666040805190810160405280600a81526020017f6b696f736b5f6e616d650000000000000000000000000000000000000000000081525087604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610eab578082015181840152602081019050610e90565b50505050905090810190601f168015610ed85780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610f11578082015181840152602081019050610ef6565b50505050905090810190601f168015610f3e5780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b602083101515610f895780518252602082019150602081019050602083039250610f64565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611030578082015181840152602081019050611015565b50505050905090810190601f16801561105d5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561107d57600080fd5b505af1158015611091573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663f58660666040805190810160405280600f81526020017f6b696f736b5f74696d655f7a6f6e65000000000000000000000000000000000081525087604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561112f578082015181840152602081019050611114565b50505050905090810190601f16801561115c5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561119557808201518184015260208101905061117a565b50505050905090810190601f1680156111c25780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b60208310151561120d57805182526020820191506020810190506020830392506111e8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156112b4578082015181840152602081019050611299565b50505050905090810190601f1680156112e15780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561130157600080fd5b505af1158015611315573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff16633eba9ed26040805190810160405280600c81526020017f6b696f736b2e6578697374730000000000000000000000000000000000000000815250876040516020018083805190602001908083835b6020831015156113a4578051825260208201915060208101905060208303925061137f565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156113f757805182526020820191506020810190506020830392506113d2565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611461578051825260208201915060208101905060208303925061143c565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060016040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018215151515815260200192505050600060405180830381600087803b1580156114f557600080fd5b505af1158015611509573d6000803e3d6000fd5b505050506001905095945050505050565b60608060606115298585611d5a565b151561159d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4b696f736b206973206e6f74206578697374730000000000000000000000000081525060200191505060405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663a209a29c6040805190810160405280601681526020017f6b696f736b5f6c6f636174696f6e5f616464726573730000000000000000000081525086604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561163757808201518184015260208101905061161c565b50505050905090810190601f1680156116645780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561169d578082015181840152602081019050611682565b50505050905090810190601f1680156116ca5780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b60208310151561171557805182526020820191506020810190506020830392506116f0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b15801561179c57600080fd5b505af11580156117b0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156117da57600080fd5b8101908080516401000000008111156117f257600080fd5b8281019050602081018481111561180857600080fd5b815185600182028301116401000000008211171561182557600080fd5b505092919050505092508473ffffffffffffffffffffffffffffffffffffffff1663a209a29c6040805190810160405280600a81526020017f6b696f736b5f6e616d650000000000000000000000000000000000000000000081525086604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b838110156118c95780820151818401526020810190506118ae565b50505050905090810190601f1680156118f65780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561192f578082015181840152602081019050611914565b50505050905090810190601f16801561195c5780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b6020831015156119a75780518252602082019150602081019050602083039250611982565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b158015611a2e57600080fd5b505af1158015611a42573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611a6c57600080fd5b810190808051640100000000811115611a8457600080fd5b82810190506020810184811115611a9a57600080fd5b8151856001820283011164010000000082111715611ab757600080fd5b505092919050505091508473ffffffffffffffffffffffffffffffffffffffff1663a209a29c6040805190810160405280600f81526020017f6b696f736b5f74696d655f7a6f6e65000000000000000000000000000000000081525086604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b83811015611b5b578082015181840152602081019050611b40565b50505050905090810190601f168015611b885780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611bc1578082015181840152602081019050611ba6565b50505050905090810190601f168015611bee5780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b602083101515611c395780518252602082019150602081019050602083039250611c14565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b158015611cc057600080fd5b505af1158015611cd4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611cfe57600080fd5b810190808051640100000000811115611d1657600080fd5b82810190506020810184811115611d2c57600080fd5b8151856001820283011164010000000082111715611d4957600080fd5b505092919050505090509250925092565b60008273ffffffffffffffffffffffffffffffffffffffff166317e7dd226040805190810160405280600c81526020017f6b696f736b2e6578697374730000000000000000000000000000000000000000815250846040516020018083805190602001908083835b602083101515611de75780518252602082019150602081019050602083039250611dc2565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515611e3a5780518252602082019150602081019050602083039250611e15565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611ea45780518252602082019150602081019050602083039250611e7f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015611f2b57600080fd5b505af1158015611f3f573d6000803e3d6000fd5b505050506040513d6020811015611f5557600080fd5b81019080805190602001909291905050509050929150505600a165627a7a723058204eb80474c7c2d90802b48960f77f291e4339ccd4b1be7697b094c3c092e0fb5d0029";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_KILL = "kill";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SAVE = "save";

    public static final String FUNC_GET = "get";

    public static final Event SAVED_EVENT = new Event("Saved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("77142", "0x96095a293d0df67f0ae557b828ac912319cc49b0");
    }

    protected KioskStorage(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected KioskStorage(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> kill() {
        final Function function = new Function(
                FUNC_KILL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<KioskStorage> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _config) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_config)));
        return deployRemoteCall(KioskStorage.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<KioskStorage> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _config) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_config)));
        return deployRemoteCall(KioskStorage.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<SavedEventResponse> getSavedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SAVED_EVENT, transactionReceipt);
        ArrayList<SavedEventResponse> responses = new ArrayList<SavedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SavedEventResponse typedResponse = new SavedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._kioskId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._location = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._name = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._timezone = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SavedEventResponse> savedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, SavedEventResponse>() {
            @Override
            public SavedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SAVED_EVENT, log);
                SavedEventResponse typedResponse = new SavedEventResponse();
                typedResponse.log = log;
                typedResponse._kioskId = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._location = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._name = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._timezone = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<SavedEventResponse> savedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SAVED_EVENT));
        return savedEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> save(String _kioskId, String _location, String _name, String _timezone) {
        final Function function = new Function(
                FUNC_SAVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_kioskId), 
                new org.web3j.abi.datatypes.Utf8String(_location), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_timezone)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<String, String, String>> get(String _kioskId) {
        final Function function = new Function(FUNC_GET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_kioskId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple3<String, String, String>>(
                new Callable<Tuple3<String, String, String>>() {
                    @Override
                    public Tuple3<String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public static KioskStorage load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new KioskStorage(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static KioskStorage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new KioskStorage(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public interface KioskStorageEvent extends SmartContractEvent {
    }

    public static class SavedEventResponse implements KioskStorageEvent {
        public Log log;

        public String _kioskId;

        public String _location;

        public String _name;

        public String _timezone;
    }
}
