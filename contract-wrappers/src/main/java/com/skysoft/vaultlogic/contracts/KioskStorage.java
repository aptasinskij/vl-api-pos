package com.skysoft.vaultlogic.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.contracts.SmartContractEvent;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class KioskStorage extends Contract {
    private static final String BINARY = "0x60806040523480156200001157600080fd5b5060405160208062001b808339810180604052810190808051906020019092919050505080336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff161415151562000106576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f53797374656d2073746174652076696f6c6174696f6e0000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e59c5296200019e620002ae640100000000026401000000009004565b306040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156200023e57808201518184015260208101905062000221565b50505050905090810190601f1680156200026c5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156200028d57600080fd5b505af1158015620002a2573d6000803e3d6000fd5b505050505050620002eb565b60606040805190810160405280600d81526020017f6b696f736b2d73746f7261676500000000000000000000000000000000000000815250905090565b61188580620002fb6000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638da5cb5b1461005c578063a45a73ae146100b3578063ad99dc491461026d575b600080fd5b34801561006857600080fd5b506100716103a8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100bf57600080fd5b5061011a600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506103cd565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610162578082015181840152602081019050610147565b50505050905090810190601f16801561018f5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156101c85780820151818401526020810190506101ad565b50505050905090810190601f1680156101f55780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561022e578082015181840152602081019050610213565b50505050905090810190601f16801561025b5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561027957600080fd5b506103a6600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610445565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060806060610438846104146040805190810160405280600881526020017f64617461626173650000000000000000000000000000000000000000000000008152506104b7565b73ffffffffffffffffffffffffffffffffffffffff1661068090919063ffffffff16565b9250925092509193909250565b6104b18484848461048a6040805190810160405280600881526020017f64617461626173650000000000000000000000000000000000000000000000008152506104b7565b73ffffffffffffffffffffffffffffffffffffffff16610e4290949392919063ffffffff16565b50505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610563578082015181840152602081019050610548565b50505050905090810190601f1680156105905780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156105af57600080fd5b505af11580156105c3573d6000803e3d6000fd5b505050506040513d60208110156105d957600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff161415151561067b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f53797374656d2073746174652076696f6c6174696f6e0000000000000000000081525060200191505060405180910390fd5b919050565b60608060608473ffffffffffffffffffffffffffffffffffffffff1663a209a29c6040805190810160405280601681526020017f6b696f736b5f6c6f636174696f6e5f616464726573730000000000000000000081525086604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561071f578082015181840152602081019050610704565b50505050905090810190601f16801561074c5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561078557808201518184015260208101905061076a565b50505050905090810190601f1680156107b25780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b6020831015156107fd57805182526020820191506020810190506020830392506107d8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b15801561088457600080fd5b505af1158015610898573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156108c257600080fd5b8101908080516401000000008111156108da57600080fd5b828101905060208101848111156108f057600080fd5b815185600182028301116401000000008211171561090d57600080fd5b505092919050505092508473ffffffffffffffffffffffffffffffffffffffff1663a209a29c6040805190810160405280600a81526020017f6b696f736b5f6e616d650000000000000000000000000000000000000000000081525086604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b838110156109b1578082015181840152602081019050610996565b50505050905090810190601f1680156109de5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610a175780820151818401526020810190506109fc565b50505050905090810190601f168015610a445780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b602083101515610a8f5780518252602082019150602081019050602083039250610a6a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b158015610b1657600080fd5b505af1158015610b2a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610b5457600080fd5b810190808051640100000000811115610b6c57600080fd5b82810190506020810184811115610b8257600080fd5b8151856001820283011164010000000082111715610b9f57600080fd5b505092919050505091508473ffffffffffffffffffffffffffffffffffffffff1663a209a29c6040805190810160405280600f81526020017f6b696f736b5f74696d655f7a6f6e65000000000000000000000000000000000081525086604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610c43578082015181840152602081019050610c28565b50505050905090810190601f168015610c705780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610ca9578082015181840152602081019050610c8e565b50505050905090810190601f168015610cd65780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b602083101515610d215780518252602082019150602081019050602083039250610cfc565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b158015610da857600080fd5b505af1158015610dbc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610de657600080fd5b810190808051640100000000811115610dfe57600080fd5b82810190506020810184811115610e1457600080fd5b8151856001820283011164010000000082111715610e3157600080fd5b505092919050505090509250925092565b8473ffffffffffffffffffffffffffffffffffffffff1663f58660666040805190810160405280600e81526020017f6b696f736b5f73686f72745f696400000000000000000000000000000000000081525086604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610edc578082015181840152602081019050610ec1565b50505050905090810190601f168015610f095780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610f42578082015181840152602081019050610f27565b50505050905090810190601f168015610f6f5780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b602083101515610fba5780518252602082019150602081019050602083039250610f95565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611061578082015181840152602081019050611046565b50505050905090810190601f16801561108e5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156110ae57600080fd5b505af11580156110c2573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663f58660666040805190810160405280601681526020017f6b696f736b5f6c6f636174696f6e5f616464726573730000000000000000000081525086604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b83811015611160578082015181840152602081019050611145565b50505050905090810190601f16801561118d5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156111c65780820151818401526020810190506111ab565b50505050905090810190601f1680156111f35780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b60208310151561123e5780518252602082019150602081019050602083039250611219565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156112e55780820151818401526020810190506112ca565b50505050905090810190601f1680156113125780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561133257600080fd5b505af1158015611346573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663f58660666040805190810160405280600a81526020017f6b696f736b5f6e616d650000000000000000000000000000000000000000000081525086604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b838110156113e45780820151818401526020810190506113c9565b50505050905090810190601f1680156114115780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561144a57808201518184015260208101905061142f565b50505050905090810190601f1680156114775780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b6020831015156114c2578051825260208201915060208101905060208303925061149d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561156957808201518184015260208101905061154e565b50505050905090810190601f1680156115965780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156115b657600080fd5b505af11580156115ca573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663f58660666040805190810160405280600f81526020017f6b696f736b5f74696d655f7a6f6e65000000000000000000000000000000000081525086604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561166857808201518184015260208101905061164d565b50505050905090810190601f1680156116955780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156116ce5780820151818401526020810190506116b3565b50505050905090810190601f1680156116fb5780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b6020831015156117465780518252602082019150602081019050602083039250611721565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156117ed5780820151818401526020810190506117d2565b50505050905090810190601f16801561181a5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561183a57600080fd5b505af115801561184e573d6000803e3d6000fd5b5050505050505050505600a165627a7a72305820d41ae0e7f3e9cc9a58d1c9ce2ed00e035c80aefdd07354b64c83b224091f4a460029";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SAVEKIOSK = "saveKiosk";

    public static final String FUNC_RETRIEVEKIOSK = "retrieveKiosk";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("5777", "0x367f4b51d637003a1851352ceea9aa81670a9548");
    }

    protected KioskStorage(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected KioskStorage(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<KioskStorage> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String registryAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddr)));
        return deployRemoteCall(KioskStorage.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<KioskStorage> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String registryAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddr)));
        return deployRemoteCall(KioskStorage.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> saveKiosk(String shortId, String locationAddress, String name, String timeZone) {
        final Function function = new Function(
                FUNC_SAVEKIOSK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(shortId), 
                new org.web3j.abi.datatypes.Utf8String(locationAddress), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(timeZone)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<String, String, String>> retrieveKiosk(String shortId) {
        final Function function = new Function(FUNC_RETRIEVEKIOSK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(shortId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple3<String, String, String>>(
                new Callable<Tuple3<String, String, String>>() {
                    @Override
                    public Tuple3<String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public static KioskStorage load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new KioskStorage(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static KioskStorage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new KioskStorage(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public interface KioskStorageEvent extends SmartContractEvent {
    }
}
