package com.skysoft.vaultlogic.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.contracts.SmartContractEvent;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class KioskStorage extends Contract {
    private static final String BINARY = "0x60806040523480156200001157600080fd5b50604051602080620022718339810180604052810190808051906020019092919050505080336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff161415151562000106576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f53797374656d2073746174652076696f6c6174696f6e0000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e59c5296200019e620002ae640100000000026401000000009004565b306040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156200023e57808201518184015260208101905062000221565b50505050905090810190601f1680156200026c5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156200028d57600080fd5b505af1158015620002a2573d6000803e3d6000fd5b505050505050620002eb565b60606040805190810160405280600d81526020017f6b696f736b2d73746f7261676500000000000000000000000000000000000000815250905090565b611f7680620002fb6000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063314fd4dc1461005c578063693ec85e146101975780638da5cb5b14610351575b600080fd5b34801561006857600080fd5b50610195600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506103a8565b005b3480156101a357600080fd5b506101fe600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506105fe565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561024657808201518184015260208101905061022b565b50505050905090810190601f1680156102735780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156102ac578082015181840152602081019050610291565b50505050905090810190601f1680156102d95780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156103125780820151818401526020810190506102f7565b50505050905090810190601f16801561033f5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561035d57600080fd5b50610366610676565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610414848484846103ed6040805190810160405280600881526020017f646174616261736500000000000000000000000000000000000000000000000081525061069b565b73ffffffffffffffffffffffffffffffffffffffff1661086490949392919063ffffffff16565b507f9a70d206ebfed2a7f1731124889425f55cd2eafea00afdf1805f8183bbdd0a28848484846040518080602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b8381101561048657808201518184015260208101905061046b565b50505050905090810190601f1680156104b35780820380516001836020036101000a031916815260200191505b50858103845288818151815260200191508051906020019080838360005b838110156104ec5780820151818401526020810190506104d1565b50505050905090810190601f1680156105195780820380516001836020036101000a031916815260200191505b50858103835287818151815260200191508051906020019080838360005b83811015610552578082015181840152602081019050610537565b50505050905090810190601f16801561057f5780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b838110156105b857808201518184015260208101905061059d565b50505050905090810190601f1680156105e55780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a150505050565b6060806060610669846106456040805190810160405280600881526020017f646174616261736500000000000000000000000000000000000000000000000081525061069b565b73ffffffffffffffffffffffffffffffffffffffff166114f690919063ffffffff16565b9250925092509193909250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561074757808201518184015260208101905061072c565b50505050905090810190601f1680156107745780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561079357600080fd5b505af11580156107a7573d6000803e3d6000fd5b505050506040513d60208110156107bd57600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff161415151561085f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f53797374656d2073746174652076696f6c6174696f6e0000000000000000000081525060200191505060405180910390fd5b919050565b60006108708686611d36565b1515156108e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4b696f736b20616c72656164792065786973747300000000000000000000000081525060200191505060405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663f58660666040805190810160405280600e81526020017f6b696f736b5f73686f72745f696400000000000000000000000000000000000081525087604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561097f578082015181840152602081019050610964565b50505050905090810190601f1680156109ac5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156109e55780820151818401526020810190506109ca565b50505050905090810190601f168015610a125780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b602083101515610a5d5780518252602082019150602081019050602083039250610a38565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020876040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b04578082015181840152602081019050610ae9565b50505050905090810190601f168015610b315780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610b5157600080fd5b505af1158015610b65573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663f58660666040805190810160405280601681526020017f6b696f736b5f6c6f636174696f6e5f616464726573730000000000000000000081525087604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610c03578082015181840152602081019050610be8565b50505050905090810190601f168015610c305780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610c69578082015181840152602081019050610c4e565b50505050905090810190601f168015610c965780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b602083101515610ce15780518252602082019150602081019050602083039250610cbc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610d88578082015181840152602081019050610d6d565b50505050905090810190601f168015610db55780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610dd557600080fd5b505af1158015610de9573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663f58660666040805190810160405280600a81526020017f6b696f736b5f6e616d650000000000000000000000000000000000000000000081525087604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610e87578082015181840152602081019050610e6c565b50505050905090810190601f168015610eb45780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610eed578082015181840152602081019050610ed2565b50505050905090810190601f168015610f1a5780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b602083101515610f655780518252602082019150602081019050602083039250610f40565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561100c578082015181840152602081019050610ff1565b50505050905090810190601f1680156110395780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561105957600080fd5b505af115801561106d573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663f58660666040805190810160405280600f81526020017f6b696f736b5f74696d655f7a6f6e65000000000000000000000000000000000081525087604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561110b5780820151818401526020810190506110f0565b50505050905090810190601f1680156111385780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611171578082015181840152602081019050611156565b50505050905090810190601f16801561119e5780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b6020831015156111e957805182526020820191506020810190506020830392506111c4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611290578082015181840152602081019050611275565b50505050905090810190601f1680156112bd5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156112dd57600080fd5b505af11580156112f1573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff16633eba9ed26040805190810160405280600c81526020017f6b696f736b2e6578697374730000000000000000000000000000000000000000815250876040516020018083805190602001908083835b602083101515611380578051825260208201915060208101905060208303925061135b565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156113d357805182526020820191506020810190506020830392506113ae565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561143d5780518252602082019150602081019050602083039250611418565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060016040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018215151515815260200192505050600060405180830381600087803b1580156114d157600080fd5b505af11580156114e5573d6000803e3d6000fd5b505050506001905095945050505050565b60608060606115058585611d36565b1515611579576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4b696f736b206973206e6f74206578697374730000000000000000000000000081525060200191505060405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663a209a29c6040805190810160405280601681526020017f6b696f736b5f6c6f636174696f6e5f616464726573730000000000000000000081525086604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b838110156116135780820151818401526020810190506115f8565b50505050905090810190601f1680156116405780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561167957808201518184015260208101905061165e565b50505050905090810190601f1680156116a65780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b6020831015156116f157805182526020820191506020810190506020830392506116cc565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b15801561177857600080fd5b505af115801561178c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156117b657600080fd5b8101908080516401000000008111156117ce57600080fd5b828101905060208101848111156117e457600080fd5b815185600182028301116401000000008211171561180157600080fd5b505092919050505092508473ffffffffffffffffffffffffffffffffffffffff1663a209a29c6040805190810160405280600a81526020017f6b696f736b5f6e616d650000000000000000000000000000000000000000000081525086604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b838110156118a557808201518184015260208101905061188a565b50505050905090810190601f1680156118d25780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561190b5780820151818401526020810190506118f0565b50505050905090810190601f1680156119385780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b602083101515611983578051825260208201915060208101905060208303925061195e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b158015611a0a57600080fd5b505af1158015611a1e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611a4857600080fd5b810190808051640100000000811115611a6057600080fd5b82810190506020810184811115611a7657600080fd5b8151856001820283011164010000000082111715611a9357600080fd5b505092919050505091508473ffffffffffffffffffffffffffffffffffffffff1663a209a29c6040805190810160405280600f81526020017f6b696f736b5f74696d655f7a6f6e65000000000000000000000000000000000081525086604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b83811015611b37578082015181840152602081019050611b1c565b50505050905090810190601f168015611b645780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611b9d578082015181840152602081019050611b82565b50505050905090810190601f168015611bca5780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b602083101515611c155780518252602082019150602081019050602083039250611bf0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050600060405180830381600087803b158015611c9c57600080fd5b505af1158015611cb0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611cda57600080fd5b810190808051640100000000811115611cf257600080fd5b82810190506020810184811115611d0857600080fd5b8151856001820283011164010000000082111715611d2557600080fd5b505092919050505090509250925092565b60008273ffffffffffffffffffffffffffffffffffffffff166317e7dd226040805190810160405280600c81526020017f6b696f736b2e6578697374730000000000000000000000000000000000000000815250846040516020018083805190602001908083835b602083101515611dc35780518252602082019150602081019050602083039250611d9e565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515611e165780518252602082019150602081019050602083039250611df1565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611e805780518252602082019150602081019050602083039250611e5b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b158015611f0757600080fd5b505af1158015611f1b573d6000803e3d6000fd5b505050506040513d6020811015611f3157600080fd5b81019080805190602001909291905050509050929150505600a165627a7a72305820061a8422258b7f613beff4018876c287698fc93d4c6082f4de21e2b5be4b7bf80029";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SAVE = "save";

    public static final String FUNC_GET = "get";

    public static final Event SAVED_EVENT = new Event("Saved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("77142", "0x43f74d0398dced22ed821b30fc1e417d0546e006");
    }

    protected KioskStorage(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected KioskStorage(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<KioskStorage> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String registryAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddr)));
        return deployRemoteCall(KioskStorage.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<KioskStorage> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String registryAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddr)));
        return deployRemoteCall(KioskStorage.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<SavedEventResponse> getSavedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SAVED_EVENT, transactionReceipt);
        ArrayList<SavedEventResponse> responses = new ArrayList<SavedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SavedEventResponse typedResponse = new SavedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._kioskId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._location = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._name = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._timezone = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SavedEventResponse> savedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, SavedEventResponse>() {
            @Override
            public SavedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SAVED_EVENT, log);
                SavedEventResponse typedResponse = new SavedEventResponse();
                typedResponse.log = log;
                typedResponse._kioskId = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._location = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._name = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._timezone = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<SavedEventResponse> savedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SAVED_EVENT));
        return savedEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> save(String _kioskId, String _location, String _name, String _timezone) {
        final Function function = new Function(
                FUNC_SAVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_kioskId), 
                new org.web3j.abi.datatypes.Utf8String(_location), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_timezone)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<String, String, String>> get(String _kioskId) {
        final Function function = new Function(FUNC_GET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_kioskId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple3<String, String, String>>(
                new Callable<Tuple3<String, String, String>>() {
                    @Override
                    public Tuple3<String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public static KioskStorage load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new KioskStorage(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static KioskStorage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new KioskStorage(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public interface KioskStorageEvent extends SmartContractEvent {
    }

    public static class SavedEventResponse implements KioskStorageEvent {
        public Log log;

        public String _kioskId;

        public String _location;

        public String _name;

        public String _timezone;
    }
}
